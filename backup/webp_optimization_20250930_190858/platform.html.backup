<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes, viewport-fit=cover">
    <title>Dreamle Mining Platform - Complete Web3 Mining Platform</title>

    <!-- Content Security Policy for Web3 compatibility and API access -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com 'wasm-unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' http://localhost:3000 http://127.0.0.1:3000 https: wss: ws:; worker-src 'self' blob:;">

    <!-- Enhanced mobile meta tags -->
    <meta name="format-detection" content="telephone=no">

    <!-- Preconnect for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <!-- Basic Icons -->
    <link rel="icon" type="image/svg+xml" href="images/icon.svg">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon.ico">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon.ico">

    <!-- Web3 library - 本地化（中国用户优化） -->
    <script src="libs/web3.min.js"></script>

    <!-- Ethers.js library - 本地化（中国用户优化） -->
    <script src="libs/ethers.min.js"></script>

    <!-- 自动清理本地存储 - 确保每次打开都是全新状态 -->
    <script src="js/auto-clear-storage.js"></script>

    <!-- DApp初始化 - 必须在Web3之后，其他脚本之前 -->
    <script src="js/dapp-init.js"></script>

    <!-- BSC Mainnet Contract Configuration - Add timestamp to prevent caching -->
    <script src="config/contracts.js?v=2025-09-30-MAINNET"></script>

    <!-- BSC Mainnet Contract Addresses -->
    <script>
        // BSC 主网合约地址配置 - Mainnet (2025-09-30 部署)
        // 注意：这些地址会被 config/contracts.js 覆盖，这里仅作为备用
        window.CONTRACT_ADDRESSES = window.CONTRACT_ADDRESSES || {
            UNIFIED_SYSTEM: '0xf9462c7fE57Fc7Aff662204228cCdCd0a9d3398A', // 统一系统合约 (BSC Mainnet)
            DREAMLE_TOKEN: '0x4440409e078D44A63c72696716b84A46814717e9',  // DRM代币 (BSC Mainnet)
            USDT_TOKEN: '0x55d398326f99059fF775485246999027B3197955'     // USDT代币 (BSC Mainnet)
        };
        console.log('🔄 BSC Mainnet Configuration Loaded');
        console.log('📋 USDT Contract:', window.CONTRACT_ADDRESSES.USDT_TOKEN);
        console.log('📋 DRM Contract:', window.CONTRACT_ADDRESSES.DREAMLE_TOKEN);
        console.log('📋 System Contract:', window.CONTRACT_ADDRESSES.UNIFIED_SYSTEM);
    </script>

    <!-- Force Web3 initialization -->
    <script>
        console.log('🔧 Force initializing Web3 connection...');

        // Ensure Web3 is available
        if (typeof Web3 !== 'undefined') {
            console.log('✅ Web3 library loaded');

            // Always initialize a basic Web3 instance for read-only operations (BSC Mainnet)
            const defaultRPC = 'https://lb.drpc.org/bsc/AqlGpHrYB01Fo1dFtBRULdHcTuavm9wR8L7hwg8TMB_n';
            window.web3 = new Web3(defaultRPC);
            console.log('✅ Web3 initialized with BSC Mainnet RPC for read-only operations');

            // If MetaMask is available, also set up wallet connection capability
            if (window.ethereum) {
                console.log('✅ MetaMask detected - wallet connection available');
                // Set global variable
                window.isWeb3Available = true;
            } else {
                // Use dual-endpoint Web3 manager (HTTP + WebSocket)
                console.log('🔍 MetaMask not detected, using dual-endpoint RPC...');
                initializeBackupWeb3().then(() => {
                    // Set global variable
                    window.isWeb3Available = true;
                    console.log('✅ Dual-endpoint Web3 initialization complete');
                }).catch(error => {
                    console.error('❌ Dual-endpoint Web3 initialization failed:', error);
                    // Set to true even if failed, use default configuration
                    window.isWeb3Available = true;
                });
            }
        }

        // Initialize dual-endpoint Web3 instance (HTTP + WebSocket)
        async function initializeBackupWeb3() {
            try {
                // HTTP RPC endpoint configuration - for transactions and queries (BSC Mainnet)
                const httpRPCs = [
                    'https://lb.drpc.org/bsc/AqlGpHrYB01Fo1dFtBRULdHcTuavm9wR8L7hwg8TMB_n', // Primary HTTP endpoint
                    'https://bsc-dataseed.binance.org/', // BSC Mainnet official endpoint - backup
                    'https://bsc-dataseed1.defibit.io/' // BSC Mainnet public endpoint - backup
                ];

                // WebSocket RPC endpoint configuration - for real-time monitoring (BSC Mainnet)
                const wsRPCs = [
                    'wss://bsc-ws-node.nariox.org:443' // BSC Mainnet WebSocket endpoint
                ];

                console.log('🔍 Initializing dual-endpoint Web3 connection...');

                // 1. Initialize HTTP Web3 instance (for transactions and queries)
                let httpWeb3 = null;
                for (const rpcUrl of httpRPCs) {
                    try {
                        const testWeb3 = new Web3(rpcUrl);

                        // Test HTTP connection
                        const timeoutPromise = new Promise((_, reject) => {
                            setTimeout(() => reject(new Error('Timeout')), 3000);
                        });

                        const chainId = await Promise.race([
                            testWeb3.eth.getChainId(),
                            timeoutPromise
                        ]);

                        if (Number(chainId) === 56) { // BSC Mainnet Chain ID
                            httpWeb3 = testWeb3;
                            window.web3 = testWeb3; // Primary Web3 instance
                            console.log(`✅ HTTP Web3 initialization successful: ${rpcUrl}`);

                            // Update RPC status display
                            if (typeof window.updateRPCStatus === 'function') {
                                const rpcName = getRPCName(rpcUrl);
                                window.updateRPCStatus('good', `${rpcName} HTTP Connected`, null);
                            }
                            break;
                        }
                    } catch (error) {
                        console.warn(`⚠️ HTTP RPC node failed: ${rpcUrl} - ${error.message}`);
                        continue;
                    }
                }

                // 2. Initialize WebSocket Web3 instance (for real-time monitoring)
                let wsWeb3 = null;
                for (const wsUrl of wsRPCs) {
                    try {
                        const wsProvider = new Web3.providers.WebsocketProvider(wsUrl);
                        const testWsWeb3 = new Web3(wsProvider);

                        // Test WebSocket connection
                        const wsTimeoutPromise = new Promise((_, reject) => {
                            setTimeout(() => reject(new Error('WebSocket timeout')), 5000);
                        });

                        const wsChainId = await Promise.race([
                            testWsWeb3.eth.getChainId(),
                            wsTimeoutPromise
                        ]);

                        if (Number(wsChainId) === 56) { // BSC Mainnet Chain ID
                            wsWeb3 = testWsWeb3;
                            window.web3WS = testWsWeb3; // WebSocket Web3 instance
                            console.log(`✅ WebSocket Web3 initialization successful: ${wsUrl}`);

                            // Set up WebSocket event listeners
                            wsProvider.on('connect', () => {
                                console.log('🔌 WebSocket connection established');
                                if (typeof window.updateRPCStatus === 'function') {
                                    window.updateRPCStatus('good', 'WebSocket Connected', null);
                                }
                            });

                            wsProvider.on('disconnect', () => {
                                console.warn('🔌 WebSocket connection disconnected');
                                if (typeof window.updateRPCStatus === 'function') {
                                    window.updateRPCStatus('warning', 'WebSocket Disconnected', null);
                                }
                            });

                            wsProvider.on('error', (error) => {
                                console.error('🔌 WebSocket connection error:', error);
                            });

                            break;
                        }
                    } catch (error) {
                        console.warn(`⚠️ WebSocket RPC node failed: ${wsUrl} - ${error.message}`);
                        continue;
                    }
                }

                // If HTTP connection failed, use default
                if (!httpWeb3) {
                    console.warn('⚠️ All HTTP RPC nodes test failed, using default node');
                    window.web3 = new Web3(httpRPCs[0]);
                }

                if (typeof window.updateRPCStatus === 'function') {
                    window.updateRPCStatus('error', 'All RPC nodes unavailable', null);
                }

            } catch (error) {
                console.error('❌ Backup Web3 initialization failed:', error);

                // Last resort fallback (BSC Mainnet)
                window.web3 = new Web3('https://data-seed-prebsc-1-s1.binance.org:8545');

                if (typeof window.updateRPCStatus === 'function') {
                    window.updateRPCStatus('error', 'RPC Connection Error', null);
                }
            }
        }

        // Get RPC name
        function getRPCName(url) {
            if (url.includes('quiknode')) return 'QuikNode';
            if (url.includes('infura')) return 'Infura';
            if (url.includes('ankr')) return 'Ankr';
            if (url.includes('publicnode')) return 'PublicNode';
            if (url.includes('1rpc')) return '1RPC';
            if (url.includes('llamarpc')) return 'LlamaRPC';
            if (url.includes('meowrpc')) return 'MeowRPC';
            if (url.includes('drpc')) return 'dRPC';
            return 'Unknown Node';
        }
    </script>

    <!-- Dual-endpoint Web3 Manager -->
    <script>
        // Web3 dual-endpoint manager
        class DualEndpointWeb3Manager {
            constructor() {
                this.httpWeb3 = null;
                this.wsWeb3 = null;
                this.isInitialized = false;
            }

            // Get HTTP Web3 instance (for transactions and queries)
            getHttpWeb3() {
                return window.web3 || this.httpWeb3;
            }

            // Get WebSocket Web3 instance (for real-time monitoring)
            getWsWeb3() {
                return window.web3WS || this.wsWeb3;
            }

            // Send transaction (using HTTP endpoint)
            async sendTransaction(txObject) {
                const web3 = this.getHttpWeb3();
                if (!web3) {
                    throw new Error('HTTP Web3 instance not initialized');
                }
                return await web3.eth.sendTransaction(txObject);
            }

            // Call contract methods (using HTTP endpoint)
            async callContract(contract, method, ...args) {
                const web3 = this.getHttpWeb3();
                if (!web3) {
                    throw new Error('HTTP Web3 instance not initialized');
                }
                return await contract.methods[method](...args).call();
            }

            // Estimate gas fees (using HTTP endpoint)
            async estimateGas(contract, method, ...args) {
                const web3 = this.getHttpWeb3();
                if (!web3) {
                    throw new Error('HTTP Web3 instance not initialized');
                }
                return await contract.methods[method](...args).estimateGas();
            }

            // Listen to contract events (using WebSocket endpoint)
            subscribeToEvents(contract, eventName, options = {}) {
                const wsWeb3 = this.getWsWeb3();
                if (!wsWeb3) {
                    console.warn('WebSocket Web3 instance not initialized, using HTTP endpoint for event listening');
                    const httpWeb3 = this.getHttpWeb3();
                    if (httpWeb3) {
                        return contract.events[eventName](options);
                    }
                    throw new Error('No available Web3 instance');
                }

                // Use WebSocket contract instance
                const wsContract = new wsWeb3.eth.Contract(contract.options.jsonInterface, contract.options.address);
                return wsContract.events[eventName](options);
            }

            // Listen to new blocks (using WebSocket endpoint)
            subscribeToNewBlocks(callback) {
                const wsWeb3 = this.getWsWeb3();
                if (!wsWeb3) {
                    console.warn('WebSocket Web3 instance not initialized, cannot listen to new blocks');
                    return null;
                }

                return wsWeb3.eth.subscribe('newBlockHeaders', (error, blockHeader) => {
                    if (error) {
                        console.error('New block listening error:', error);
                        return;
                    }
                    callback(blockHeader);
                });
            }

            // Listen to pending transactions (using WebSocket endpoint)
            subscribeToPendingTransactions(callback) {
                const wsWeb3 = this.getWsWeb3();
                if (!wsWeb3) {
                    console.warn('WebSocket Web3 instance not initialized, cannot listen to pending transactions');
                    return null;
                }

                return wsWeb3.eth.subscribe('pendingTransactions', (error, txHash) => {
                    if (error) {
                        console.error('Pending transaction listening error:', error);
                        return;
                    }
                    callback(txHash);
                });
            }

            // Get connection status
            getConnectionStatus() {
                return {
                    http: !!this.getHttpWeb3(),
                    websocket: !!this.getWsWeb3(),
                    both: !!this.getHttpWeb3() && !!this.getWsWeb3()
                };
            }

            // Smart selection of best endpoint
            getBestWeb3ForOperation(operationType) {
                switch (operationType) {
                    case 'transaction':
                    case 'call':
                    case 'estimate':
                    case 'balance':
                        return this.getHttpWeb3();

                    case 'events':
                    case 'subscribe':
                    case 'realtime':
                        return this.getWsWeb3() || this.getHttpWeb3();

                    default:
                        return this.getHttpWeb3();
                }
            }
        }

        // Create global Web3 manager instance
        window.web3Manager = new DualEndpointWeb3Manager();

        // Convenience functions
        window.getWeb3 = (type = 'http') => {
            if (type === 'ws' || type === 'websocket') {
                return window.web3Manager.getWsWeb3();
            }
            return window.web3Manager.getHttpWeb3();
        };

        console.log('🔧 Dual-endpoint Web3 manager initialized');
    </script>

    <!-- Remove conflicting scripts -->

    <!-- Force Clear Old Wallet Connector -->
    <script>
        // Force clear old wallet connectors and all related cache
        console.log('🧹 Starting to force clear old wallet connectors...');

        // Clear global variables
        if (window.WalletConnector) {
            delete window.WalletConnector;
            console.log('✅ Deleted window.WalletConnector');
        }
        if (window.walletConnector) {
            delete window.walletConnector;
            console.log('✅ Deleted window.walletConnector');
        }

        // Clear possible old functions
        if (window.connectWallet) {
            delete window.connectWallet;
            console.log('✅ Deleted old window.connectWallet');
        }

        // Clear possible old event listeners
        const oldConnectBtns = document.querySelectorAll('[onclick*="connectWallet"]');
        oldConnectBtns.forEach(btn => {
            btn.removeAttribute('onclick');
            console.log('✅ Removed old onclick events');
        });

        // 缓存清理功能已移除（PWA已禁用）

        console.log('🎯 Old wallet connector cleanup completed');
    </script>

    <!-- 3D effects library - 本地化（中国用户优化） -->
    <script src="libs/three.min.js"></script>

    <!-- External styles -->
    <link rel="stylesheet" href="miner-cards.css">
    <link rel="stylesheet" href="css/device-experience.css">
    <link rel="stylesheet" href="css/navbar-fix.css">
    <link rel="stylesheet" href="css/homepage-redesign.css">
    <link rel="stylesheet" href="css/mining-platform-redesign.css">

    <!-- Styles -->
    <style>
        /* Basic style reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Orbitron', -apple-system, BlinkMacSystemFont, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #0a0a0a 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
            padding-top: 80px; /* Leave space for new navigation bar */
        }

        /* 3D background effects */
        .bg-3d {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0.3;
        }

        /* Top navigation bar */
        .navbar,
        .top-nav {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 70px;
            background: rgba(0, 0, 0, 0.95);
            backdrop-filter: blur(20px);
            border-bottom: 2px solid rgba(0, 255, 255, 0.3);
            z-index: 1000;
        }

        .nav-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            height: 100%;
        }

        .nav-left {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .home-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: rgba(0, 255, 255, 0.1);
            border: 1px solid rgba(0, 255, 255, 0.3);
            border-radius: 25px;
            color: #00ffff;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .home-btn:hover {
            background: rgba(0, 255, 255, 0.2);
            border-color: rgba(0, 255, 255, 0.6);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.3);
        }

        .home-icon {
            font-size: 16px;
        }

        .home-text {
            font-family: inherit;
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            background: linear-gradient(45deg, #00ffff, #ff00ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 30px rgba(0, 255, 255, 0.5);
        }
        
        .wallet-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .network-status {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 12px;
            color: #00ffff;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #00ff00;
            animation: pulse 2s infinite;
        }
        
        .status-dot.disconnected {
            background: #ff0000;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.1); }
        }
        
        .wallet-address {
            font-family: monospace;
            font-size: 12px;
            color: #ffffff;
            background: rgba(0, 255, 255, 0.1);
            padding: 5px 10px;
            border-radius: 15px;
            border: 1px solid rgba(0, 255, 255, 0.3);
        }
        
        .connect-btn {
            background: linear-gradient(135deg, #00ffff, #ff00ff);
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            color: #000;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }
        
        .connect-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 0 25px rgba(0, 255, 255, 0.6);
        }
        
        /* Main content area - Updated for new navbar */
        .main-container {
            margin-top: 80px;
            padding: 20px;
            min-height: calc(100vh - 80px);
        }

        /* Tab navigation */
        .tab-nav {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            padding: 10px;
            background: rgba(0, 255, 255, 0.05);
            border-radius: 15px;
            border: 1px solid rgba(0, 255, 255, 0.2);
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: thin;
            scrollbar-color: rgba(0, 255, 255, 0.3) transparent;
        }

        .tab-nav::-webkit-scrollbar {
            height: 4px;
        }

        .tab-nav::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 2px;
        }

        .tab-nav::-webkit-scrollbar-thumb {
            background: rgba(0, 255, 255, 0.3);
            border-radius: 2px;
        }

        .tab-nav::-webkit-scrollbar-thumb:hover {
            background: rgba(0, 255, 255, 0.5);
        }

        .tab-btn {
            flex: 1;
            min-width: 120px;
            padding: 12px 20px;
            background: transparent;
            border: none;
            color: #cccccc;
            cursor: pointer;
            border-radius: 20px;
            transition: all 0.3s ease;
            font-size: 14px;
            white-space: nowrap;
            flex-shrink: 0;
            position: relative;
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
        }

        .tab-btn.active {
            background: linear-gradient(135deg, #00ffff, #ff00ff);
            color: #000;
            font-weight: bold;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.4);
        }

        .tab-btn:hover:not(.active) {
            background: rgba(0, 255, 255, 0.1);
            color: #00ffff;
        }

        .tab-btn:active {
            transform: scale(0.98);
        }

        /* Tab content */
        .tab-content {
            display: none;
            animation: fadeIn 0.5s ease-in-out;
        }

        .tab-content.active {
            display: block !important;
        }
        .tab-nav {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 25px;
            padding: 5px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(0, 255, 255, 0.2);
            overflow-x: auto;
        }
        

        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Card styles */
        .card {
            background: rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(0, 255, 255, 0.3);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 25px;
            backdrop-filter: blur(15px);
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #00ffff, #ff00ff, transparent);
            animation: shimmer 3s infinite;
        }
        
        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 255, 255, 0.2);
            border-color: rgba(0, 255, 255, 0.5);
        }
        
        .card-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 20px;
            color: #00ffff;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .card-title::before {
            content: '';
            width: 4px;
            height: 20px;
            background: linear-gradient(45deg, #00ffff, #ff00ff);
            border-radius: 2px;
        }
        
        /* Grid layout */
        .grid {
            display: grid;
            gap: 20px;
        }

        .grid-2 {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        .grid-3 {
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }

        .grid-4 {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        }

        /* Mobile-optimized grid layouts */
        @media (max-width: 480px) {
            .grid {
                gap: 12px;
            }

            .grid-2,
            .grid-3,
            .grid-4 {
                grid-template-columns: 1fr;
            }

            /* Special 2-column layout for small stats on mobile */
            .grid-4.mobile-2-col {
                grid-template-columns: 1fr 1fr;
                gap: 8px;
            }

            .grid-4.mobile-2-col .stat-card {
                padding: 12px 8px;
            }

            .grid-4.mobile-2-col .stat-value {
                font-size: 16px;
            }

            .grid-4.mobile-2-col .stat-label {
                font-size: 10px;
            }
        }

        @media (min-width: 481px) and (max-width: 768px) {
            .grid {
                gap: 16px;
            }

            .grid-2 {
                grid-template-columns: 1fr;
            }

            .grid-3 {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }

            .grid-4 {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
        }

        /* Statistics cards */
        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 255, 0.2);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .stat-card::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, #00ffff, transparent);
        }
        
        .stat-card:hover {
            transform: translateY(-3px);
            background: rgba(0, 255, 255, 0.1);
            border-color: rgba(0, 255, 255, 0.5);
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #00ffff;
            margin-bottom: 8px;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5);
        }
        
        .stat-label {
            font-size: 12px;
            color: #cccccc;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        /* Button styles */
        .btn {
            background: linear-gradient(135deg, #00ffff, #ff00ff);
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            color: #000;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.4);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn:disabled {
            background: #666;
            color: #999;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-secondary {
            background: rgba(0, 255, 255, 0.2);
            color: #00ffff;
            border: 1px solid rgba(0, 255, 255, 0.5);
        }
        
        .btn-secondary:hover {
            background: rgba(0, 255, 255, 0.3);
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.3);
        }

        .btn-warning {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid rgba(255, 193, 7, 0.5);
        }

        .btn-warning:hover {
            background: rgba(255, 193, 7, 0.3);
            box-shadow: 0 5px 20px rgba(255, 193, 7, 0.3);
        }

        /* Lock period progress bar styles */
        .lock-progress-container {
            width: 100%;
        }

        .lock-progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 8px;
        }

        .lock-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #28a745, #20c997);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .lock-progress-text {
            font-size: 0.85em;
            color: #6c757d;
            text-align: center;
        }

        /* Miner status styles */
        .miner-status-valid {
            color: #28a745 !important;
            font-weight: bold;
        }

        .miner-status-expired {
            color: #dc3545 !important;
            font-weight: bold;
        }

        .miner-status-warning {
            color: #ffc107 !important;
            font-weight: bold;
        }



        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Mining pool status colors */
        .pool-status-excellent { color: #28a745 !important; }
        .pool-status-healthy { color: #20c997 !important; }
        .pool-status-fair { color: #ffc107 !important; }
        .pool-status-low { color: #fd7e14 !important; }
        .pool-status-inactive { color: #dc3545 !important; }

        /* Enhanced data card styles */
        .stat-card.enhanced {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .stat-card.enhanced .stat-label {
            color: rgba(255, 255, 255, 0.8);
        }

        /* Network statistics enhancement */
        .network-stats-enhanced .stat-value {
            font-size: 1.8em;
            font-weight: bold;
        }





        /* Loading state animation */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Quick action button styles */
        .quick-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .quick-actions .btn {
            flex: 1;
            min-width: 150px;
            padding: 12px 16px;
            font-size: 0.9em;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .quick-actions .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        /* Earnings comparison card */
        .earnings-comparison {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 15px 0;
        }

        .earnings-boost-notice {
            text-align: center;
            margin-top: 15px;
            padding: 15px;
            background: rgba(40, 167, 69, 0.1);
            border-radius: 8px;
            border: 1px solid rgba(40, 167, 69, 0.2);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }

        /* Mobile adaptation */
        @media (max-width: 768px) {
            .quick-actions {
                flex-direction: column;
            }

            .quick-actions .btn {
                min-width: 100%;
                margin-bottom: 8px;
            }

            .earnings-comparison {
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .grid.grid-4 {
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
            }


        }

        @media (max-width: 480px) {
            .grid.grid-4 {
                grid-template-columns: 1fr;
            }

            .stat-card {
                padding: 12px;
            }

            .stat-value {
                font-size: 1.3em;
            }
        }



        /* Network health monitoring styles */
        .health-indicators {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .health-indicator {
            display: flex;
            align-items: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #28a745;
            transition: all 0.3s ease;
        }

        .health-indicator:hover {
            background: #e9ecef;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .health-indicator.warning {
            border-left-color: #ffc107;
        }

        .health-indicator.danger {
            border-left-color: #dc3545;
        }

        .health-icon {
            font-size: 1.8em;
            margin-right: 15px;
            flex-shrink: 0;
        }

        .health-info {
            flex: 1;
        }

        .health-title {
            font-weight: bold;
            color: #495057;
            margin-bottom: 3px;
        }

        .health-status {
            color: #28a745;
            font-size: 0.9em;
        }

        .health-status.warning {
            color: #ffc107;
        }

        .health-status.danger {
            color: #dc3545;
        }

        .health-score {
            font-size: 1.2em;
            font-weight: bold;
            color: #28a745;
            margin-left: 15px;
        }

        .health-score.warning {
            color: #ffc107;
        }

        .health-score.danger {
            color: #dc3545;
        }





        /* Status styles */
        .status-locked {
            color: #dc3545 !important;
        }

        .status-unlocked {
            color: #28a745 !important;
        }



        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }



        .miner-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            margin-bottom: 8px;
        }

        .miner-item.expired {
            border-color: #dc3545;
            background: #fff5f5;
        }

        .miner-item.active {
            border-color: #28a745;
            background: #f8fff8;
        }

        /* Input field styles */
        .input-group {
            margin-bottom: 20px;
        }

        .input-label {
            display: block;
            margin-bottom: 8px;
            color: #00ffff;
            font-size: 14px;
            font-weight: bold;
        }

        .input-field {
            width: 100%;
            padding: 12px 15px;
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(0, 255, 255, 0.3);
            border-radius: 10px;
            color: #ffffff;
            font-size: 14px;
            transition: all 0.3s ease;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            touch-action: manipulation;
        }

        .input-field:focus {
            outline: none;
            border-color: #00ffff;
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.3);
            background: rgba(0, 255, 255, 0.05);
        }

        .input-field::placeholder {
            color: #666;
        }

        /* Selector styles */
        .select-field {
            width: 100%;
            padding: 12px 15px;
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(0, 255, 255, 0.3);
            border-radius: 10px;
            color: #ffffff;
            font-size: 14px;
            cursor: pointer;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            touch-action: manipulation;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%2300ffff' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 16px;
            padding-right: 40px;
        }

        .select-field option {
            background: #1a1a2e;
            color: #ffffff;
        }

        /* Mobile form optimizations */
        @media (max-width: 768px) {
            .input-group {
                margin-bottom: 16px;
            }

            .input-label {
                font-size: 13px;
                margin-bottom: 6px;
            }

            .input-field,
            .select-field {
                padding: 14px 16px;
                font-size: 16px; /* Prevents zoom on iOS */
                min-height: 44px;
                border-radius: 12px;
                -webkit-tap-highlight-color: transparent;
            }

            .select-field {
                padding-right: 44px;
                background-size: 18px;
                background-position: right 16px center;
            }

            /* Improve touch targets for form elements */
            .input-field:focus,
            .select-field:focus {
                border-width: 2px;
                box-shadow: 0 0 20px rgba(0, 255, 255, 0.4);
            }
        }

        @media (max-width: 480px) {
            .input-field,
            .select-field {
                padding: 16px 18px;
                font-size: 16px;
                min-height: 48px;
                border-radius: 14px;
            }

            .select-field {
                padding-right: 48px;
                background-size: 20px;
                background-position: right 18px center;
            }
        }
        
        /* Enhanced responsive design */

        /* Small mobile devices (320px - 480px) */
        @media (max-width: 480px) {
            .top-nav {
                height: 60px;
                padding: 0 10px;
                flex-wrap: wrap;
            }

            .nav-left {
                gap: 8px;
                flex: 1;
                min-width: 0;
            }

            .home-btn {
                padding: 8px 12px;
                font-size: 12px;
                min-width: 44px;
                min-height: 44px;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .home-text {
                display: none;
            }

            .home-icon {
                font-size: 16px;
            }

            .logo {
                font-size: 16px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .wallet-info {
                gap: 8px;
                flex-wrap: wrap;
            }

            .network-status {
                font-size: 10px;
                order: 3;
                width: 100%;
                justify-content: center;
                margin-top: 5px;
            }

            .wallet-address {
                font-size: 10px;
                padding: 4px 8px;
                max-width: 120px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .connect-btn {
                padding: 8px 12px;
                font-size: 12px;
                min-width: 44px;
                min-height: 44px;
            }

            .main-container {
                margin-top: 60px;
                padding: 10px;
            }
        }

        /* Medium mobile devices (481px - 768px) */
        @media (min-width: 481px) and (max-width: 768px) {
            .top-nav {
                padding: 0 15px;
                height: 65px;
            }

            .nav-left {
                gap: 12px;
            }

            .home-btn {
                padding: 8px 14px;
                font-size: 13px;
                min-width: 44px;
                min-height: 44px;
            }

            .home-text {
                display: none;
            }

            .home-icon {
                font-size: 18px;
            }

            .logo {
                font-size: 18px;
            }

            .wallet-address {
                font-size: 11px;
                max-width: 150px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .connect-btn {
                padding: 9px 16px;
                font-size: 13px;
                min-width: 44px;
                min-height: 44px;
            }

            .main-container {
                margin-top: 65px;
                padding: 15px;
            }
        }

        /* General mobile styles (up to 768px) */
        @media (max-width: 768px) {
            .tab-nav {
                margin-bottom: 20px;
                padding: 8px;
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
                scrollbar-width: none;
                -ms-overflow-style: none;
            }

            .tab-nav::-webkit-scrollbar {
                display: none;
            }

            .tab-btn {
                min-width: 120px;
                padding: 12px 16px;
                font-size: 13px;
                min-height: 44px;
                white-space: nowrap;
                flex-shrink: 0;
            }

            .card {
                padding: 16px;
                margin-bottom: 16px;
                border-radius: 15px;
            }

            .card-title {
                font-size: 18px;
                margin-bottom: 16px;
            }

            .grid-2,
            .grid-3,
            .grid-4 {
                grid-template-columns: 1fr;
                gap: 12px;
            }

            .stat-card {
                padding: 16px;
                border-radius: 12px;
            }

            .stat-value {
                font-size: 20px;
            }

            .stat-label {
                font-size: 11px;
            }

            .btn {
                padding: 14px 20px;
                font-size: 14px;
                min-height: 44px;
                border-radius: 22px;
            }

            .input-field,
            .select-field {
                padding: 14px 16px;
                font-size: 16px; /* Prevents zoom on iOS */
                min-height: 44px;
                border-radius: 12px;
            }

            .input-label {
                font-size: 13px;
                margin-bottom: 6px;
            }
        }

        /* Additional mobile-first improvements */

        /* Landscape orientation optimizations */
        @media (max-width: 768px) and (orientation: landscape) {
            .top-nav {
                height: 55px;
            }

            .main-container {
                margin-top: 55px;
                padding: 12px;
            }

            .card {
                padding: 14px;
                margin-bottom: 14px;
            }

            .tab-nav {
                margin-bottom: 16px;
                padding: 6px;
            }

            .tab-btn {
                padding: 10px 14px;
                font-size: 12px;
                min-height: 40px;
            }
        }

        /* Touch-friendly improvements */
        @media (max-width: 768px) {
            /* Ensure all interactive elements meet minimum touch target size */
            button,
            .btn,
            .tab-btn,
            .home-btn,
            .connect-btn,
            .miner-btn,
            input[type="button"],
            input[type="submit"] {
                min-height: 44px;
                min-width: 44px;
                touch-action: manipulation;
                -webkit-tap-highlight-color: transparent;
            }

            /* Improve spacing between interactive elements */
            .btn + .btn,
            .miner-btn + .miner-btn {
                margin-top: 8px;
            }

            /* Better focus states for accessibility */
            .btn:focus,
            .tab-btn:focus,
            .input-field:focus,
            .select-field:focus {
                outline: 2px solid rgba(0, 255, 255, 0.6);
                outline-offset: 2px;
            }

            /* Improve text readability */
            body {
                -webkit-text-size-adjust: 100%;
                -ms-text-size-adjust: 100%;
                text-size-adjust: 100%;
            }

            /* Better scrolling performance */
            .tab-nav,
            .main-container {
                -webkit-overflow-scrolling: touch;
            }

            /* Prevent horizontal scrolling */
            body,
            html {
                overflow-x: hidden;
            }

            .main-container {
                width: 100%;
                max-width: 100vw;
            }

            /* Improve message display on mobile */
            .message {
                padding: 12px;
                margin: 12px 0;
                font-size: 13px;
                border-radius: 8px;
            }

            /* Better loading states */
            .loading {
                width: 16px;
                height: 16px;
                border-width: 2px;
            }

            /* Improve referral section for mobile */
            .referral-user-item {
                padding: 12px;
                border-radius: 8px;
                margin-bottom: 8px;
            }

            .user-avatar {
                width: 32px;
                height: 32px;
                font-size: 18px;
                margin-right: 12px;
            }

            .user-address {
                font-size: 12px;
                margin-bottom: 4px;
            }

            .purchase-info {
                gap: 6px;
                margin-bottom: 4px;
            }

            .miner-level,
            .token-id {
                padding: 1px 6px;
                font-size: 10px;
                border-radius: 10px;
            }

            .purchase-time {
                font-size: 11px;
            }

            /* Improve admin controls for mobile */
            #adminControls {
                padding: 12px;
                border-radius: 8px;
                margin-top: 16px;
            }

            #adminControls h4 {
                font-size: 16px;
                margin-bottom: 12px;
            }

            #adminControls .btn {
                padding: 10px 14px;
                font-size: 12px;
                margin-bottom: 8px;
            }
        }

        /* Modern Card-style FAB Styles */
        .modern-fab-container {
            position: fixed;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            z-index: 9999;
            font-family: 'Arial', sans-serif;
        }

        .modern-fab {
            background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35);
            background-size: 300% 300%;
            border: none;
            border-radius: 25px;
            padding: 12px 20px;
            color: #000;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            box-shadow: 0 8px 25px rgba(0, 255, 136, 0.4);
            backdrop-filter: blur(10px);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 60px;
            justify-content: center;
            animation: gradientFlow 3s ease infinite;
            position: relative;
            overflow: hidden;
        }

        .modern-fab::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.6s;
        }

        .modern-fab:hover::before {
            left: 100%;
        }

        .modern-fab:hover {
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 12px 35px rgba(0, 255, 136, 0.6);
        }

        .modern-fab.expanded {
            border-radius: 15px;
            padding: 15px 20px;
            min-width: 280px;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(0, 255, 136, 0.3);
        }

        .fab-icon {
            width: 20px;
            height: 20px;
            transition: all 0.3s ease;
        }

        .fab-text {
            font-size: 13px;
            font-weight: 600;
            opacity: 0;
            max-width: 0;
            overflow: hidden;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

        .modern-fab.expanded .fab-text {
            opacity: 1;
            max-width: 100px;
        }

        .fab-actions {
            display: none;
            flex-direction: column;
            gap: 12px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid rgba(0, 255, 136, 0.2);
        }

        .modern-fab.expanded .fab-actions {
            display: flex;
        }

        .fab-action {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 10px 15px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.2);
            border-radius: 10px;
            color: #ffffff;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .fab-action::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 255, 136, 0.1), transparent);
            transition: left 0.4s;
        }

        .fab-action:hover::before {
            left: 100%;
        }

        .fab-action:hover {
            background: rgba(0, 255, 136, 0.1);
            border-color: rgba(0, 255, 136, 0.5);
            transform: translateX(5px);
        }

        .fab-action-icon {
            width: 18px;
            height: 18px;
            flex-shrink: 0;
        }

        .fab-action.connect-wallet {
            background: linear-gradient(135deg, rgba(0, 255, 136, 0.2), rgba(0, 102, 255, 0.2));
            border-color: rgba(0, 255, 136, 0.4);
        }

        .fab-action.connect-wallet:hover {
            background: linear-gradient(135deg, rgba(0, 255, 136, 0.3), rgba(0, 102, 255, 0.3));
            border-color: rgba(0, 255, 136, 0.6);
        }

        @keyframes gradientFlow {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* Mobile optimizations */
        @media (max-width: 768px) {
            .modern-fab-container {
                right: 15px;
                top: auto;
                bottom: 80px;
                transform: none;
            }

            .modern-fab {
                padding: 10px 16px;
                font-size: 13px;
            }

            .modern-fab.expanded {
                min-width: 260px;
                padding: 12px 16px;
            }

            .nav-actions {
                display: none;
            }

            .nav-container {
                padding: 0 15px;
            }
        }

        /* Very small screens */
        @media (max-width: 375px) {
            .modern-fab-container {
                right: 10px;
                bottom: 70px;
            }

            .modern-fab.expanded {
                min-width: 240px;
                right: 10px;
            }
        }

        /* Very small screens (iPhone SE, etc.) */
        @media (max-width: 375px) {
            .top-nav {
                height: 55px;
                padding: 0 8px;
            }

            .mobile-nav-menu {
                width: 100%;
                top: 55px;
                border-radius: 0;
            }

            .nav-left {
                gap: 6px;
            }

            .logo {
                font-size: 14px;
            }

            .wallet-address {
                max-width: 100px;
                font-size: 9px;
            }

            .connect-btn {
                padding: 6px 10px;
                font-size: 11px;
            }

            .main-container {
                margin-top: 55px;
                padding: 8px;
            }

            .card {
                padding: 12px;
                margin-bottom: 12px;
                border-radius: 12px;
            }

            .card-title {
                font-size: 16px;
                margin-bottom: 12px;
            }

            .stat-card {
                padding: 12px 8px;
            }

            .stat-value {
                font-size: 18px;
            }

            .stat-label {
                font-size: 10px;
            }

            .btn {
                padding: 12px 16px;
                font-size: 13px;
                border-radius: 20px;
            }

            .tab-btn {
                min-width: 100px;
                padding: 10px 12px;
                font-size: 12px;
            }

            .input-field,
            .select-field {
                padding: 12px 14px;
                font-size: 16px;
                min-height: 44px;
            }
        }
        
        /* Loading animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(0, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #00ffff;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Message notifications */
        .message {
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            font-size: 14px;
            animation: slideIn 0.3s ease-out;
        }
        
        .message.success {
            background: rgba(0, 255, 0, 0.1);
            border: 1px solid rgba(0, 255, 0, 0.3);
            color: #00ff00;
        }
        
        .message.error {
            background: rgba(255, 0, 0, 0.1);
            border: 1px solid rgba(255, 0, 0, 0.3);
            color: #ff4444;
        }
        
        .message.info {
            background: rgba(0, 255, 255, 0.1);
            border: 1px solid rgba(0, 255, 255, 0.3);
            color: #00ffff;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        /* Hidden class */
        .hidden {
            display: none !important;
        }

        /* Wallet selection modal styles */
        .wallet-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            z-index: 10001;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .wallet-modal-content {
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid rgba(0, 255, 255, 0.3);
            border-radius: 20px;
            padding: 30px;
            max-width: 400px;
            width: 90%;
            position: relative;
            max-height: 90vh;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
        }

        /* Mobile modal improvements */
        @media (max-width: 480px) {
            .wallet-modal-content {
                padding: 20px;
                border-radius: 15px;
                width: 95%;
                max-height: 85vh;
            }

            .wallet-modal-header h3 {
                font-size: 20px;
            }

            .wallet-option {
                padding: 16px;
                border-radius: 12px;
            }

            .wallet-option-icon {
                width: 36px;
                height: 36px;
                font-size: 20px;
                margin-right: 12px;
            }

            .wallet-option-name {
                font-size: 16px;
            }

            .wallet-option-desc {
                font-size: 13px;
            }
        }

        .wallet-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .wallet-modal-header h3 {
            color: #00ffff;
            margin: 0;
            font-size: 24px;
        }

        .wallet-modal-close {
            background: none;
            border: none;
            color: #00ffff;
            font-size: 30px;
            cursor: pointer;
            padding: 0;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .wallet-modal-close:hover {
            background: rgba(0, 255, 255, 0.1);
            transform: rotate(90deg);
        }

        .wallet-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .wallet-option {
            display: flex;
            align-items: center;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(0, 255, 255, 0.2);
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .wallet-option:hover {
            border-color: rgba(0, 255, 255, 0.5);
            background: rgba(0, 255, 255, 0.1);
            transform: translateY(-2px);
        }

        .wallet-option-icon {
            width: 40px;
            height: 40px;
            margin-right: 15px;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
        }

        .wallet-option-info {
            flex: 1;
        }

        .wallet-option-name {
            color: #00ffff;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .wallet-option-desc {
            color: #cccccc;
            font-size: 14px;
        }

        .wallet-option-status {
            color: #00ff88;
            font-size: 12px;
            font-weight: bold;
        }

        .wallet-option.unavailable {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .wallet-option.unavailable:hover {
            transform: none;
            border-color: rgba(0, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.05);
        }

        /* Miner status styles */
        .miner-level-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .miner-status-badge {
            position: absolute;
            top: 10px;
            left: 10px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .miner-status-badge.active {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
        }

        .miner-status-badge.warning {
            background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
            color: white;
        }

        .miner-status-badge.expired {
            background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
            color: white;
        }

        .miner-card.expired {
            opacity: 0.7;
            filter: grayscale(0.3);
        }

        .miner-card.warning {
            border: 2px solid #FF9800;
            box-shadow: 0 0 15px rgba(255, 152, 0, 0.3);
        }

        .miner-stat-value.active {
            color: #4CAF50;
        }

        .miner-stat-value.warning {
            color: #FF9800;
        }

        .miner-stat-value.expired {
            color: #f44336;
        }

        /* Miners empty state styles */
        .miners-empty {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 60px 20px;
            text-align: center;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            border: 2px dashed rgba(255, 255, 255, 0.2);
            min-height: 300px;
        }

        .miners-empty-icon {
            font-size: 64px;
            margin-bottom: 20px;
            opacity: 0.7;
        }

        .miners-empty-text {
            font-size: 24px;
            font-weight: bold;
            color: #fff;
            margin-bottom: 10px;
        }

        .miners-empty-subtext {
            font-size: 16px;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 5px;
            line-height: 1.4;
        }

        /* Miner card error state */
        .miner-card.error {
            border: 2px solid #f44336;
            box-shadow: 0 0 15px rgba(244, 67, 54, 0.3);
            background: rgba(244, 67, 54, 0.1);
        }

        .miner-card.error .miner-stat-value {
            color: #f44336;
        }

        .miner-card.error .miner-stat-label {
            color: rgba(244, 67, 54, 0.8);
        }



        .referral-user-item {
            display: flex;
            align-items: center;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(0, 255, 255, 0.2);
            border-radius: 10px;
            padding: 15px;
            transition: all 0.3s ease;
        }

        .referral-user-item:hover {
            background: rgba(0, 255, 255, 0.1);
            border-color: rgba(0, 255, 255, 0.4);
            transform: translateX(5px);
        }

        .user-avatar {
            font-size: 24px;
            margin-right: 15px;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0, 255, 255, 0.2);
            border-radius: 50%;
        }

        .user-info {
            flex: 1;
        }

        .user-address {
            font-weight: 600;
            color: #00d4ff;
            margin-bottom: 5px;
            font-family: 'Courier New', monospace;
        }

        .purchase-info {
            display: flex;
            gap: 10px;
            margin-bottom: 5px;
        }

        .miner-level {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }

        .token-id {
            background: rgba(0, 255, 255, 0.2);
            color: #00d4ff;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }

        .purchase-time {
            font-size: 12px;
            color: #ccc;
        }

        .referral-user-card .card {
            background: transparent;
            border: none;
            margin: 0;
        }

        .referral-user-card .card-body {
            padding: 20px;
        }

        .referral-user-card .card-title {
            color: #00ffff;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .referral-user-card .card-title i {
            color: #00ff88;
        }

        .referral-user-card .card-text {
            margin-bottom: 15px;
        }

        .referral-user-card .card-text small {
            color: #888;
            font-family: 'Courier New', monospace;
            font-size: 11px;
            word-break: break-all;
        }

        .referral-stats {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            align-items: center;
        }

        .referral-stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-width: 80px;
        }

        .referral-stat-value {
            color: #00ffff;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 4px;
        }

        .referral-stat-label {
            color: #ccc;
            font-size: 12px;
            text-align: center;
        }

        .miner-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
            margin-top: 10px;
        }

        .miner-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            transition: transform 0.2s ease;
        }

        .miner-badge:hover {
            transform: scale(1.05);
        }

        .miner-badge.level-1 { background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); }
        .miner-badge.level-2 { background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%); }
        .miner-badge.level-3 { background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%); }
        .miner-badge.level-4 { background: linear-gradient(135deg, #9C27B0 0%, #7B1FA2 100%); }
        .miner-badge.level-5 { background: linear-gradient(135deg, #F44336 0%, #D32F2F 100%); }
        .miner-badge.level-6 { background: linear-gradient(135deg, #E91E63 0%, #C2185B 100%); }
        .miner-badge.level-7 { background: linear-gradient(135deg, #FF5722 0%, #D84315 100%); }
        .miner-badge.level-8 { background: linear-gradient(135deg, #795548 0%, #5D4037 100%); }

        .no-referrals {
            text-align: center;
            padding: 40px 20px;
            color: #888;
            font-style: italic;
        }

        .no-referrals i {
            font-size: 48px;
            color: #444;
            margin-bottom: 15px;
            display: block;
        }

        /* Daily hashpower allocation styles */
        .daily-hashpower-container {
            margin: 15px 0;
            padding: 15px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 10px;
            border: 1px solid #dee2e6;
        }

        .hashpower-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            margin-bottom: 15px;
        }

        .summary-item {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .summary-value {
            font-size: 1.2em;
            font-weight: bold;
            color: #667eea;
        }

        .summary-value.expired {
            color: #dc3545;
        }

        .summary-label {
            font-size: 0.8em;
            color: #666;
            margin-top: 5px;
        }

        .mining-progress {
            margin: 15px 0;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 0.3s ease;
        }

        .mining-schedule-toggle {
            text-align: center;
            margin: 15px 0;
        }

        .btn-toggle {
            background: #667eea;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s;
        }

        .btn-toggle:hover {
            background: #5a67d8;
        }

        .mining-schedule {
            margin-top: 15px;
            padding: 15px;
            background: white;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }

        .schedule-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 8px;
        }

        .schedule-day {
            padding: 8px;
            border-radius: 6px;
            border: 1px solid #dee2e6;
            text-align: center;
            font-size: 0.8em;
        }

        .schedule-day.completed {
            background: #d4edda;
            border-color: #c3e6cb;
        }

        .schedule-day.current {
            background: #fff3cd;
            border-color: #ffeaa7;
        }

        .schedule-day.pending {
            background: #f8f9fa;
            border-color: #dee2e6;
        }








        /* Miner level badge styles */
        .miner-level-badge {
            transition: all 0.3s ease;
            font-weight: bold;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }

        .miner-level-badge.level-1 { background: #4CAF50; color: white; }
        .miner-level-badge.level-2 { background: #2196F3; color: white; }
        .miner-level-badge.level-3 { background: #FF9800; color: white; }
        .miner-level-badge.level-4 { background: #9C27B0; color: white; }
        .miner-level-badge.level-5 { background: #F44336; color: white; }
        .miner-level-badge.level-6 { background: #E91E63; color: white; }
        .miner-level-badge.level-7 { background: #FF5722; color: white; }
        .miner-level-badge.level-8 { background: #795548; color: white; }

        /* Miner image transition */
        .miner-image {
            transition: all 0.4s ease;
            filter: brightness(1) saturate(1);
        }

        .miner-image:hover {
            transform: scale(1.05);
            filter: brightness(1.1) saturate(1.2);
        }

        /* Miner card styles */
        .miner-card {
            background: linear-gradient(135deg, rgba(0,212,255,0.1), rgba(0,255,136,0.05));
            border: 1px solid rgba(0,212,255,0.3);
            border-radius: 15px;
            padding: 20px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .miner-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,212,255,0.3);
            border-color: rgba(0,212,255,0.5);
        }

        .miner-card.expired {
            background: linear-gradient(135deg, rgba(255,68,68,0.1), rgba(255,68,68,0.05));
            border-color: rgba(255,68,68,0.3);
        }

        .miner-card.expired:hover {
            box-shadow: 0 10px 30px rgba(255,68,68,0.3);
            border-color: rgba(255,68,68,0.5);
        }

        .miner-image-section {
            position: relative;
            margin-bottom: 15px;
        }

        .miner-card-image {
            width: 100%;
            height: 120px;
            object-fit: cover;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .miner-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .miner-header h3 {
            color: #00d4ff;
            margin: 0;
            font-size: 18px;
        }

        .miner-status {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }

        .miner-status.active {
            background: rgba(76,175,80,0.2);
            color: #4CAF50;
        }

        .miner-status.expired {
            background: rgba(255,68,68,0.2);
            color: #F44336;
        }

        .miner-stats {
            margin-bottom: 15px;
        }

        .miner-stats .stat {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .miner-stats .label {
            color: #888;
        }

        .miner-stats .value {
            color: #fff;
            font-weight: bold;
        }

        .miner-actions {
            display: flex;
            gap: 10px;
        }

        .miner-actions .btn {
            flex: 1;
            padding: 8px 12px;
            font-size: 12px;
        }

        .no-miners-card {
            grid-column: 1 / -1;
            text-align: center;
            padding: 40px;
            background: rgba(0,212,255,0.1);
            border-radius: 15px;
            border: 2px dashed rgba(0,212,255,0.3);
        }

        /* Admin notification animation */
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Admin button styles */
        .admin-purchase-btn {
            background: linear-gradient(135deg, #00ff88, #00cc66) !important;
            box-shadow: 0 4px 20px rgba(0, 255, 136, 0.3) !important;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { box-shadow: 0 4px 20px rgba(0, 255, 136, 0.3); }
            50% { box-shadow: 0 6px 30px rgba(0, 255, 136, 0.5); }
            100% { box-shadow: 0 4px 20px rgba(0, 255, 136, 0.3); }
        }

        /* Hide all status display elements */
        .system-status-info,
        .contract-info,
        .rpc-status,
        #rpcStatus,
        .system-status {
            display: none !important;
            visibility: hidden !important;
        }

    </style>
    <!-- Unified configuration - V13 Remix (Main configuration file) -->
    <!-- Comment out duplicate configuration files to avoid conflicts -->
    <!-- <script src="js/mainnet-config.js"></script> -->
</head>
<body>
    <!-- 3D background effects -->
    <canvas class="bg-3d" id="bg3d"></canvas>

    <!-- Navigation Bar - Consistent with Homepage -->
    <nav class="navbar">
        <div class="nav-container">
            <!-- Logo Area with Back to Home -->
            <div class="logo">
                <a href="index.html" class="home-btn" title="Back to Home">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 0.5rem;">
                        <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
                    </svg>
                </a>
                <div class="logo-main">
                    <span class="logo-text">Dreamle Mining</span>
                    <span class="logo-subtitle">Mining Platform</span>
                </div>
            </div>

            <!-- Network Status (Desktop Only) -->
            <div class="network-status-info">
                <div class="network-status">
                    <div class="status-dot" id="networkDot"></div>
                    <span id="networkName">BSC Mainnet</span>
                </div>
                <div class="system-status-info" style="margin-left: 15px; display: none;">
                    <div class="status-dot" style="background: #ffc107;"></div>
                    <span class="system-status" style="color: #ffc107;">⏳ System Loading...</span>
                </div>
                <div class="contract-info" style="margin-left: 15px; display: none;"></div>
            </div>

            <!-- Wallet Connection Area -->
            <div class="nav-actions">
                <div class="wallet-info-compact">
                    <div class="wallet-address" id="walletAddress">Wallet Not Connected</div>
                    <div class="rpc-status" id="rpcStatus" style="font-size: 10px; color: #888; margin-top: 2px; display: none;">
                        <span id="rpcIndicator">🔍</span> <span id="rpcText">Detecting Network...</span>
                        <div id="serverStatusDetail" style="font-size: 9px; color: #666; margin-top: 1px; display: none;"></div>
                    </div>
                </div>
                <button class="btn-connect-wallet" id="connectWalletBtn" onclick="window.connectWallet && window.connectWallet()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 0.5rem;">
                        <path d="M21 18v1a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v1"/>
                        <path d="M15 10l-4-4l-4 4"/>
                        <path d="M11 16V6"/>
                    </svg>
                    Connect Wallet
                </button>

                <button class="btn-connect-wallet" id="clearCacheBtn" style="background: linear-gradient(135deg, #666, #888); margin-left: 5px; font-size: 12px; padding: 8px 12px;">
                    🔄 Clear Cache
                </button>
            </div>

            <!-- Modern Card-style FAB will be added via JavaScript -->
        </div>
    </nav>

    <!-- Main content area -->
    <div class="main-container">
        <!-- Tab navigation -->
        <div class="tab-nav">
            <button class="tab-btn active" data-tab="dashboard" onclick="window.switchTab && window.switchTab('dashboard')">📊 Dashboard</button>
            <button class="tab-btn" data-tab="purchase" onclick="window.switchTab && window.switchTab('purchase')">🛒 Buy Miners</button>
            <button class="tab-btn" data-tab="miners" onclick="window.switchTab && window.switchTab('miners')">🤖 Miner Management</button>
            <button class="tab-btn" data-tab="exchange" onclick="window.switchTab && window.switchTab('exchange')">🔄 Token Exchange</button>
            <button class="tab-btn" data-tab="referral" onclick="window.switchTab && window.switchTab('referral')">👥 Referral System</button>
            <button class="tab-btn" data-tab="admin" onclick="window.switchTab && window.switchTab('admin')" id="adminTabBtn" style="display: none; background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">🔐 Admin Panel</button>
        </div>

        <!-- Dashboard tab -->
        <div class="tab-content active" id="dashboard">
            <!-- User asset overview -->
            <div class="card">
                <h3 class="card-title">💰 Asset Overview</h3>
                <div class="grid grid-4">
                    <div class="stat-card">
                        <div class="stat-value" id="bnbBalance">0.0000</div>
                        <div class="stat-label">BNB Balance</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="usdtBalance">0.00</div>
                        <div class="stat-label">USDT Balance</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="drmBalance">0.0000</div>
                        <div class="stat-label">DRM Balance</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalValue">$0.00</div>
                        <div class="stat-label">Total Value</div>
                    </div>
                </div>
            </div>

            <!-- Mining statistics -->
            <div class="card">
                <h3 class="card-title">⛏️ Mining Statistics</h3>
                <div class="grid grid-4">
                    <div class="stat-card">
                        <div class="stat-value" id="totalHashpower">0.0</div>
                        <div class="stat-label">Total Hashpower</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="validHashpower">0.0</div>
                        <div class="stat-label">Valid Hashpower</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="pendingRewards">0.0000</div>
                        <div class="stat-label">Pending DRM</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalClaimed">0.0000</div>
                        <div class="stat-label">Total Claimed DRM</div>
                    </div>
                </div>





                <!-- Lock status and claim button -->
                <div style="margin-top: 20px;">
                    <div class="grid grid-2" style="margin-bottom: 15px;">
                        <div class="stat-card">
                            <div class="stat-value" id="lockStatusText">🔓 Unlocked</div>
                            <div class="stat-label">Lock Status</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="lockTimeRemaining">--</div>
                            <div class="stat-label">Time Remaining</div>
                        </div>
                    </div>

                    <!-- Lock progress bar -->
                    <div class="lock-progress-container" style="margin: 15px 0;">
                        <div class="lock-progress-bar">
                            <div class="lock-progress-fill" id="lockProgressFill" style="width: 0%;"></div>
                        </div>
                        <div class="lock-progress-text" id="lockProgressText">Lock Period: 0 / 30 days</div>
                    </div>

                    <button class="btn" id="claimRewardsBtn" style="width: 100%;">
                        💎 Claim Mining Rewards
                    </button>
                </div>
            </div>



            <!-- Network statistics -->
            <div class="card">
                <h3 class="card-title">📊 Network Statistics</h3>
                <div class="grid grid-4">
                    <div class="stat-card">
                        <div class="stat-value" id="networkHashpower">0.0K</div>
                        <div class="stat-label">Network Hashpower</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="activeMiners">0</div>
                        <div class="stat-label">Active Miners</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalNetworkMiners">0</div>
                        <div class="stat-label">Total Miners</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="rewardRate">0x</div>
                        <div class="stat-label">Reward Multiplier</div>
                    </div>
                </div>
            </div>





            <!-- Network Health Monitor -->
            <div class="card">
                <h3 class="card-title">⚡ Network Health Monitor</h3>

                <!-- Health Overview -->
                <div class="grid grid-4" style="margin-bottom: 20px;">
                    <div class="stat-card">
                        <div class="stat-value" id="networkUtilization">0%</div>
                        <div class="stat-label">Network Utilization</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="avgMinerPerformance">0%</div>
                        <div class="stat-label">Avg Miner Performance</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="networkStability">Stable</div>
                        <div class="stat-label">Network Stability</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="systemUptime">99.9%</div>
                        <div class="stat-label">System Uptime</div>
                    </div>
                </div>

                <!-- Performance Metrics -->
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #495057; margin-bottom: 15px; font-size: 1.1em;">📊 Performance Metrics</h4>
                    <div class="grid grid-3">
                        <div class="stat-card">
                            <div class="stat-value" id="avgBlockTime">3.2s</div>
                            <div class="stat-label">Avg Block Time</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="transactionThroughput">1,250</div>
                            <div class="stat-label">TPS</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="networkLatency">45ms</div>
                            <div class="stat-label">Network Latency</div>
                        </div>
                    </div>
                </div>

                <!-- Health Status Indicators -->
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #495057; margin-bottom: 15px; font-size: 1.1em;">🏥 Health Status</h4>
                    <div class="health-indicators">
                        <div class="health-indicator" id="minerHealthIndicator">
                            <div class="health-icon">⛏️</div>
                            <div class="health-info">
                                <div class="health-title">Miner Network</div>
                                <div class="health-status">Excellent</div>
                            </div>
                            <div class="health-score">98%</div>
                        </div>
                        <div class="health-indicator" id="rewardHealthIndicator">
                            <div class="health-icon">💰</div>
                            <div class="health-info">
                                <div class="health-title">Reward System</div>
                                <div class="health-status">Good</div>
                            </div>
                            <div class="health-score">95%</div>
                        </div>
                        <div class="health-indicator" id="poolHealthIndicator">
                            <div class="health-icon">🏦</div>
                            <div class="health-info">
                                <div class="health-title">Liquidity Pool</div>
                                <div class="health-status">Healthy</div>
                            </div>
                            <div class="health-score">92%</div>
                        </div>
                    </div>
                </div>
            </div>



            <!-- Mining pool status -->
            <div class="card">
                <h3 class="card-title">🏦 Mining Pool Status</h3>
                <div class="grid grid-4">
                    <div class="stat-card">
                        <div class="stat-value" id="miningPoolDrmBalance">14290000.0</div>
                        <div class="stat-label">Mining Pool Balance</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalRewardsPaid">0.0</div>
                        <div class="stat-label">Total Rewards Paid</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="dailyMiningOutput">10.1</div>
                        <div class="stat-label">Daily Mining Output</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="poolHealthStatus" class="pool-status-excellent">Excellent</div>
                        <div class="stat-label">Pool Status</div>
                    </div>
                </div>

                <!-- Pool efficiency display -->
                <div class="grid grid-1" style="margin-top: 15px;">
                    <div class="stat-card">
                        <div class="stat-value" id="poolEfficiency">0%</div>
                        <div class="stat-label">Pool Efficiency</div>
                    </div>
                </div>
                <!-- Admin functions -->
                <div id="adminControls" style="display: none; margin-top: 20px; padding: 15px; background: rgba(255,165,0,0.1); border-radius: 10px; border: 1px solid rgba(255,165,0,0.3);">
                    <h4 style="color: #FFA500; margin-bottom: 15px;">🔧 Admin Control Panel</h4>
                    <div class="grid grid-2" style="gap: 10px;">
                        <button class="btn primary" onclick="injectDrmTokens()">
                            💰 Smart Inject DRM
                        </button>
                        <button class="btn secondary" onclick="fixNetworkStats()">
                            🔧 Fix Network Stats
                        </button>
                    </div>

                </div>


            </div>
        </div>

        <!-- Buy miners tab -->
        <div class="tab-content" id="purchase">
            <!-- Miner selection -->
            <div class="card">
                <h3 class="card-title">🛒 Select Miner</h3>
                <div class="input-group">
                    <label class="input-label">Miner Level</label>
                    <select class="select-field" id="minerLevelSelect" onchange="updateMinerPreviewFromSelect()">
                        <option value="1">LV.1 Miner - 40 TH/s - 100 USDT</option>
                        <option value="2">LV.2 Miner - 130 TH/s - 300 USDT</option>
                        <option value="3">LV.3 Miner - 370 TH/s - 800 USDT</option>
                        <option value="4">LV.4 Miner - 780 TH/s - 1500 USDT</option>
                        <option value="5">LV.5 Miner - 1450 TH/s - 2500 USDT</option>
                        <option value="6">LV.6 Miner - 2600 TH/s - 4000 USDT</option>
                        <option value="7">LV.7 Miner - 4500 TH/s - 6000 USDT</option>
                        <option value="8">LV.8 Miner - 6400 TH/s - 8000 USDT</option>
                    </select>
                </div>

                <div class="input-group">
                    <label class="input-label">Referrer Address (Required)</label>
                    <input type="text" class="input-field" id="referrerInput"
                           placeholder="Enter referrer wallet address" required>
                </div>
            </div>

            <!-- Miner preview -->
            <div class="card">
                <h3 class="card-title">🎯 Miner Preview</h3>
                <div class="grid grid-2" style="gap: 20px;">
                    <!-- Miner image preview -->
                    <div class="miner-preview-container" style="text-align: center;">
                        <div class="miner-image-container" style="position: relative; display: inline-block; margin-bottom: 15px;">
                            <img id="minerPreview" src="images/miners/1.png" alt="Miner Preview"
                                 class="miner-image" style="width: 200px; height: 200px; object-fit: cover; border-radius: 10px; border: 2px solid #00d4ff;">
                            <div class="miner-level-badge" id="previewLevelBadge" style="position: absolute; top: 10px; right: 10px; background: #00d4ff; color: #000; padding: 5px 10px; border-radius: 15px; font-weight: bold;">LV.1</div>
                        </div>
                    </div>

                    <!-- Miner statistics preview -->
                    <div class="miner-stats-preview">
                        <div class="stat-card">
                            <div class="stat-value" id="previewHashpower">40</div>
                            <div class="stat-label">Hashpower (TH/s)</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="previewPrice">100</div>
                            <div class="stat-label">Price (USDT)</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="previewDrmPrice">1000</div>
                            <div class="stat-label">Price (DRM)</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Purchase options -->
            <div class="grid grid-2">
                <!-- USDT purchase -->
                <div class="card">
                    <h3 class="card-title">💳 USDT Purchase</h3>
                    <div class="stat-card" style="margin-bottom: 15px;">
                        <div class="stat-value" id="usdtPrice">100 USDT</div>
                        <div class="stat-label">Purchase Price</div>
                    </div>
                    <button class="btn secondary" id="authorizeUsdtBtn" style="width: 100%; margin-bottom: 8px; background: #17a2b8; color: white;">
                        🔐 Authorize USDT
                    </button>

                    <button class="btn" id="purchaseUsdtBtn" style="width: 100%; margin-bottom: 8px;" title="Buy miner with USDT">
                        <span id="usdtBtnText">💰 Buy with USDT</span>
                        <small style="display: block; font-size: 10px; opacity: 0.7; margin-top: 2px;">(Recommended)</small>
                    </button>
                    <button class="btn primary" id="oneClickPurchaseBtn" style="width: 100%;">
                        ⚡ One-Click Authorize & Buy
                    </button>
                </div>

                <!-- DRM purchase -->
                <div class="card">
                    <h3 class="card-title">💎 DRM Purchase</h3>
                    <div class="stat-card" style="margin-bottom: 15px;">
                        <div class="stat-value" id="drmPrice">100 DRM</div>
                        <div class="stat-label">Purchase Price</div>
                    </div>
                    <button class="btn" id="purchaseDrmBtn" style="width: 100%;">
                        <span id="drmBtnText">💎 Buy with DRM</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Miner management tab -->
        <div class="tab-content" id="miners">
            <div class="card">
                <h3 class="card-title">🤖 My Miners</h3>
                <div class="stat-grid" id="minersGrid">
                    <div class="stat-card">
                        <div class="stat-label">No Miners</div>
                        <div class="stat-value" id="minerCount">0</div>
                    </div>
                </div>
                <div style="display: flex; gap: 10px; margin-top: 15px;">
                    <button class="btn btn-primary" onclick="window.loadUserMiners()" style="flex: 1;">
                        🔄 Refresh Miner List
                    </button>
                    <button class="btn btn-success" onclick="window.showBatchRenewDialog()" style="flex: 1; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        ⏰ Batch Renew Miners
                    </button>
                </div>
            </div>
        </div>

        <!-- Token exchange tab -->
        <div class="tab-content" id="exchange">
            <!-- Exchange interface -->
            <div class="card">
                <h3 class="card-title">🔄 Token Exchange</h3>

                <!-- Sponsor Acknowledgment -->
                <div class="sponsor-card" style="background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); border: 2px solid #00d4ff; border-radius: 15px; padding: 20px; margin-bottom: 20px; position: relative; overflow: hidden; box-shadow: 0 8px 32px rgba(0, 212, 255, 0.3);">
                    <!-- Background pattern -->
                    <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: radial-gradient(circle at 20% 20%, rgba(0, 255, 255, 0.1) 0%, transparent 50%), radial-gradient(circle at 80% 80%, rgba(255, 0, 255, 0.1) 0%, transparent 50%); opacity: 0.5;"></div>

                    <div style="position: relative; z-index: 2;">
                        <div style="display: flex; align-items: center; gap: 20px; margin-bottom: 15px;">
                            <!-- Ultra-Scale Playbook Image -->
                            <div style="flex-shrink: 0;">
                                <img src="images/ultrascale-playbook-original.png" alt="Ultra-Scale Playbook" style="width: 300px; height: 150px; border-radius: 10px; border: 2px solid #00d4ff; box-shadow: 0 4px 15px rgba(0, 212, 255, 0.4); object-fit: contain; background: white;">
                            </div>

                            <!-- AI Computing Integration Info -->
                            <div style="flex: 1;">
                                <div style="margin-bottom: 8px;">
                                    <h4 style="background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35); background-size: 300% 300%; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; margin: 0; font-size: 18px; font-weight: 600;">🚀 Future Vision: AI Computing Integration</h4>
                                </div>

                                <div style="color: #ffffff; font-size: 14px; line-height: 1.5;">
                                    <p style="margin: 0 0 10px 0;">
                                        <strong>🤖 AI Computing Revolution:</strong> We are developing AI interfaces that will enable your idle mobile devices and computing resources to contribute to AI integration, advancing technological progress for everyone.
                                    </p>
                                    <p style="margin: 0; font-size: 13px; color: #cccccc;">
                                        <strong>🌟 Early Builders Program:</strong> Join the first batch of participants who will shape the future of decentralized AI computing and receive exclusive rewards within the next 50 days.
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Progress indicator -->
                        <div style="background: rgba(0, 255, 255, 0.1); border-radius: 10px; padding: 8px; margin-top: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; font-size: 12px; color: #00ffff;">
                                <span>💰 Sponsored Funds: 200,000 USDT</span>
                                <span>🎯 Status: Active Mining Support</span>
                                <span>🔮 Next: AI Integration Development</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Early Builders Reward Program -->
                <div class="card" style="background: linear-gradient(135deg, #0f1419 0%, #1a2332 50%, #0f1419 100%); border: 2px solid #00ff88; margin-bottom: 25px;">
                    <h3 class="card-title" style="background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35); background-size: 300% 300%; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; display: flex; align-items: center; gap: 10px; margin-bottom: 20px; font-size: 1.5rem; font-weight: 600;">
                        🎁 Early Builders Reward Program - 50 Days Countdown
                    </h3>

                    <!-- Countdown and Announcement -->
                    <div style="background: linear-gradient(45deg, rgba(0, 255, 136, 0.1), rgba(0, 102, 255, 0.1)); border-radius: 15px; padding: 20px; margin-bottom: 20px; border: 1px solid rgba(0, 255, 136, 0.3);">
                        <div style="text-align: center; margin-bottom: 15px;">
                            <div style="background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35); background-size: 300% 300%; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-size: 1.2rem; font-weight: 600; margin-bottom: 10px;">
                                We will reward the first batch of participants who contribute to building our ecosystem within the next 50 days
                            </div>
                            <div style="color: #ffffff; font-size: 0.9rem; opacity: 0.8;">
                                Join now and be part of the future of decentralized AI computing
                            </div>
                        </div>
                    </div>

                    <!-- AI Computing Features Grid -->
                    <div class="grid grid-3" style="gap: 20px; margin-bottom: 20px;">
                        <!-- Large Model Training Acceleration -->
                        <div class="stat-card" style="background: rgba(0, 255, 136, 0.1); border: 2px solid rgba(0, 255, 136, 0.3); padding: 20px;">
                            <div style="background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35); background-size: 300% 300%; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-size: 1.1rem; font-weight: 600; margin-bottom: 10px;">
                                🤖 Large Model Training Acceleration
                            </div>
                            <div style="color: #ffffff; font-size: 0.9rem; margin-bottom: 15px;">
                                <span style="color: #00ff88;">AI Training</span>
                            </div>
                            <div style="color: #ffffff; font-size: 0.85rem; line-height: 1.4; margin-bottom: 15px;">
                                Providing distributed training computing power for large language models like Llama and GPT
                            </div>
                            <div style="display: flex; flex-direction: column; gap: 8px;">
                                <div style="color: #00ff88; font-size: 0.8rem;">• 300% training speed improvement</div>
                                <div style="color: #00ff88; font-size: 0.8rem;">• 60% cost reduction</div>
                                <div style="color: #00ff88; font-size: 0.8rem;">• Support for hundred-billion parameter models</div>
                            </div>
                        </div>

                        <!-- Real-time Inference Crowdsourcing -->
                        <div class="stat-card" style="background: rgba(0, 102, 255, 0.1); border: 2px solid rgba(0, 102, 255, 0.3); padding: 20px;">
                            <div style="background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35); background-size: 300% 300%; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-size: 1.1rem; font-weight: 600; margin-bottom: 10px;">
                                ⚡ Real-time Inference Crowdsourcing
                            </div>
                            <div style="color: #ffffff; font-size: 0.9rem; margin-bottom: 15px;">
                                <span style="color: #0066ff;">Crowdsourcing</span>
                            </div>
                            <div style="color: #ffffff; font-size: 0.85rem; line-height: 1.4; margin-bottom: 15px;">
                                Breaking down large AI inference tasks into small fragments, processed collaboratively by distributed computing networks
                            </div>
                            <div style="display: flex; flex-direction: column; gap: 8px;">
                                <div style="color: #0066ff; font-size: 0.8rem;">• Response time &lt;100ms</div>
                                <div style="color: #0066ff; font-size: 0.8rem;">• Support for 100K+ concurrent requests</div>
                                <div style="color: #0066ff; font-size: 0.8rem;">• Intelligent load balancing</div>
                            </div>
                        </div>

                        <!-- Partnership Cases -->
                        <div class="stat-card" style="background: rgba(255, 107, 53, 0.1); border: 2px solid rgba(255, 107, 53, 0.3); padding: 20px;">
                            <div style="background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35); background-size: 300% 300%; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-size: 1.1rem; font-weight: 600; margin-bottom: 10px;">
                                🤝 Partnership Cases
                            </div>
                            <div style="color: #ffffff; font-size: 0.9rem; margin-bottom: 15px;">
                                <span style="color: #ff6b35;">Ecosystem</span>
                            </div>
                            <div style="color: #ffffff; font-size: 0.85rem; line-height: 1.4; margin-bottom: 15px;">
                                Deep collaboration with renowned AI projects to build a complete AI computing ecosystem
                            </div>
                            <div style="display: flex; flex-direction: column; gap: 8px;">
                                <div style="color: #ff6b35; font-size: 0.8rem;">• OpenAI API compatible</div>
                                <div style="color: #ff6b35; font-size: 0.8rem;">• Hugging Face integration</div>
                                <div style="color: #ff6b35; font-size: 0.8rem;">• Stability AI partnership</div>
                            </div>
                        </div>
                    </div>

                    <!-- Call to Action -->
                    <div style="background: rgba(0, 0, 0, 0.3); border-radius: 10px; padding: 20px; border: 1px solid rgba(0, 255, 136, 0.2); text-align: center;">
                        <div style="background: linear-gradient(135deg, #00ff88, #0066ff, #ff6b35); background-size: 300% 300%; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-size: 1.1rem; font-weight: 600; margin-bottom: 10px;">
                            🚀 Join the AI Computing Revolution
                        </div>
                        <p style="color: #ffffff; margin: 0; line-height: 1.6; font-size: 0.9rem;">
                            Be among the first builders to shape the future of decentralized AI computing. Early participants will receive exclusive rewards and priority access to our advanced features.
                        </p>
                    </div>
                </div>

                <!-- Exchange direction selection -->
                <div class="grid grid-2" style="margin-bottom: 20px;">
                    <button class="btn btn-secondary" id="usdtToDrmBtn" onclick="setExchangeDirection('usdtToDrm')">Buy DRM with USDT</button>
                    <button class="btn btn-secondary" id="drmToUsdtBtn" onclick="setExchangeDirection('drmToUsdt')">Sell DRM for USDT</button>
                </div>

                <!-- Exchange input -->
                <div class="input-group">
                    <label class="input-label" id="fromTokenLabel">Enter USDT Amount</label>
                    <input type="number" class="input-field" id="exchangeFromAmount"
                           placeholder="0.00" step="0.01" oninput="calculateExchangeAmount()">
                </div>

                <!-- Exchange preview -->
                <div class="stat-card" style="margin: 20px 0;">
                    <div class="stat-value" id="exchangeToAmount">0.00</div>
                    <div class="stat-label" id="toTokenLabel">Will Receive DRM</div>
                </div>

                <!-- Authorization status and buttons -->
                <div id="authorizationSection" style="margin: 20px 0; display: none;">
                    <div class="stat-card" style="background: #fff3cd; border: 1px solid #ffeaa7;">
                        <div class="stat-label" style="color: #856404;">⚠️ Authorization Required</div>
                        <div class="stat-value" style="font-size: 14px; color: #856404;" id="authorizationMessage">
                            Need to authorize DRM tokens for exchange
                        </div>
                    </div>
                    <button class="btn btn-warning" id="authorizeBtn" style="width: 100%; margin-top: 10px;">
                        🔓 Authorize DRM Tokens
                    </button>
                </div>

                <button class="btn" id="executeExchangeBtn" onclick="executeExchange()" style="width: 100%;">
                    🔄 Execute Exchange
                </button>
            </div>

            <!-- Liquidity pool status -->
            <div class="card">
                <h3 class="card-title">💧 Liquidity Pool Status</h3>
                <div class="grid grid-2">
                    <div class="stat-card">
                        <div class="stat-value" id="poolUsdtBalance">273140.00</div>
                        <div class="stat-label">USDT Pool Balance</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="poolDrmBalance">0.00</div>
                        <div class="stat-label">DRM Pool Balance</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Referral system tab -->
        <div class="tab-content" id="referral">
            <!-- Referral link -->
            <div class="card">
                <h3 class="card-title">🔗 My Referral Link</h3>
                <div class="input-group">
                    <label class="input-label">Referral Link</label>
                    <div style="display: flex; gap: 10px;">
                        <input type="text" class="input-field" id="referralLink" readonly
                               value="Referral link will be generated after connecting wallet">
                        <button class="btn btn-secondary" id="copyLinkBtn">📋 Copy</button>
                    </div>
                </div>
            </div>

            <!-- Referral statistics -->
            <div class="card">
                <h3 class="card-title">📊 Referral Statistics</h3>
                <div class="grid grid-4">
                    <div class="stat-card">
                        <div class="stat-value" id="directReferrals">0</div>
                        <div class="stat-label">Direct Referrals</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalReferrals">0</div>
                        <div class="stat-label">Total Referrals</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="usdtRewards">0.00</div>
                        <div class="stat-label">USDT Rewards</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="hashpowerRewards">0</div>
                        <div class="stat-label">Hashpower Rewards</div>
                    </div>
                </div>
            </div>



            <!-- Referred users details -->
            <div class="card">
                <div id="referralDetailsContainer">
                    <!-- Referred users details component will be rendered here -->
                </div>
            </div>
        </div>

        <!-- Admin Panel tab -->
        <div class="tab-content" id="admin" style="display: none;">
            <div class="card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                <h3 class="card-title">🔐 管理员控制面板</h3>
                <p style="opacity: 0.9;">只有管理员地址可以访问此面板</p>
                <p style="font-size: 0.9em; opacity: 0.8;">管理员地址: 0xdb4a...9965</p>
            </div>

            <!-- 特殊推荐人管理 -->
            <div class="card">
                <h3 class="card-title">👥 特殊推荐人管理</h3>

                <div class="input-group">
                    <label class="input-label">推荐人地址</label>
                    <input type="text" class="input-field" id="specialReferrerAddress"
                           placeholder="0x...">
                </div>

                <div style="display: flex; gap: 10px; margin-top: 15px;">
                    <button class="btn btn-success" onclick="window.adminAddSpecialReferrer()" style="flex: 1;">
                        ➕ 添加特殊推荐人
                    </button>
                    <button class="btn btn-danger" onclick="window.adminRemoveSpecialReferrer()" style="flex: 1;">
                        ➖ 移除特殊推荐人
                    </button>
                </div>
            </div>

            <!-- 流动性管理 -->
            <div class="card">
                <h3 class="card-title">💧 流动性管理</h3>

                <div class="input-group">
                    <label class="input-label">USDT数量</label>
                    <input type="number" class="input-field" id="injectUsdtAmount"
                           placeholder="0.00" step="0.01">
                </div>

                <div class="input-group">
                    <label class="input-label">DRM数量</label>
                    <input type="number" class="input-field" id="injectDrmAmount"
                           placeholder="0.00" step="0.01">
                </div>

                <button class="btn btn-primary" onclick="window.adminInjectLiquidityUI()" style="width: 100%; margin-top: 15px;">
                    💧 注入流动性
                </button>
            </div>

            <!-- 管理员提取 -->
            <div class="card">
                <h3 class="card-title">💸 管理员提取</h3>

                <div class="input-group">
                    <label class="input-label">代币地址</label>
                    <select class="input-field" id="withdrawTokenAddress">
                        <option value="0xB7F75C05D28c131c207506D7F6667b7Cc272404a">USDT</option>
                        <option value="0xC54bb7c8D7E22115aA83D7016fDfadEEfB725Ae9">DRM</option>
                    </select>
                </div>

                <div class="input-group">
                    <label class="input-label">提取数量</label>
                    <input type="number" class="input-field" id="withdrawAmount"
                           placeholder="0.00" step="0.01">
                </div>

                <button class="btn btn-warning" onclick="window.adminWithdrawUI()" style="width: 100%; margin-top: 15px;">
                    💸 提取代币
                </button>
            </div>

            <!-- 系统管理 -->
            <div class="card">
                <h3 class="card-title">⚙️ 系统管理</h3>

                <div class="input-group">
                    <label class="input-label">用户地址（更新过期矿机）</label>
                    <input type="text" class="input-field" id="updateExpiredUserAddress"
                           placeholder="0x...">
                </div>

                <div style="display: flex; gap: 10px; margin-top: 15px;">
                    <button class="btn btn-secondary" onclick="window.adminUpdateExpiredMinersUI()" style="flex: 1;">
                        🔄 更新过期矿机
                    </button>
                    <button class="btn btn-danger" onclick="window.adminEmergencyPauseUI()" style="flex: 1;">
                        🔴 紧急暂停
                    </button>
                </div>
            </div>
        </div>

        <!-- Message display area -->
        <div id="messageArea"></div>



        <!-- Wallet selection modal -->
        <div id="walletModal" class="wallet-modal" style="display: none;">
            <div class="wallet-modal-content">
                <div class="wallet-modal-header">
                    <h3>Select Wallet</h3>
                    <button class="wallet-modal-close" onclick="closeWalletModal()">×</button>
                </div>
                <div class="wallet-modal-body">
                    <div id="walletOptions" class="wallet-options">
                        <!-- Wallet options will be dynamically generated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript functionality -->
    <!-- Phase 1: Basic configuration and ABI (priority loading) -->
    <script src="js/unified-system-v19-abi.js"></script>
    <script src="js/dreamle-token-abi.js"></script>
    <script>
        // 兼容层：将 V19 ABI 映射到旧变量名
        window.UNIFIED_SYSTEM_V16_ABI = window.UNIFIED_SYSTEM_V19_ABI;
        window.UNIFIED_SYSTEM_V18_ABI = window.UNIFIED_SYSTEM_V19_ABI;
        window.ERC20_ABI = window.DREAMLE_TOKEN_ABI;
        console.log('✅ ABI compatibility layer loaded');
    </script>
    <script src="js/web3-config.js"></script>

    <!-- Image Optimizer (WebP + Lazy Loading) - 节省94%流量 -->
    <script src="js/image-optimizer.js"></script>

    <!-- v16-config.js has been replaced by contracts.js, ensure using latest contract addresses -->
    <!-- <script src="js/v16-config.js"></script> -->

    <!-- Force confirm using correct contract addresses -->
    <script>
        // Ensure using latest contract addresses (BSC Mainnet)
        const CORRECT_UNIFIED_ADDRESS = '0xf9462c7fE57Fc7Aff662204228cCdCd0a9d3398A';
        const CORRECT_DRM_ADDRESS = '0x4440409e078D44A63c72696716b84A46814717e9';

        if (window.CONTRACT_ADDRESSES) {
            if (window.CONTRACT_ADDRESSES.UNIFIED_SYSTEM !== CORRECT_UNIFIED_ADDRESS) {
                console.warn('⚠️ Old unified system address detected, force updating to V19 address');
                window.CONTRACT_ADDRESSES.UNIFIED_SYSTEM = CORRECT_UNIFIED_ADDRESS;
                console.log('✅ Unified system address force updated to:', window.CONTRACT_ADDRESSES.UNIFIED_SYSTEM);
            }
            if (window.CONTRACT_ADDRESSES.DREAMLE_TOKEN !== CORRECT_DRM_ADDRESS) {
                console.warn('⚠️ Old DRM token address detected, force updating to new address');
                window.CONTRACT_ADDRESSES.DREAMLE_TOKEN = CORRECT_DRM_ADDRESS;
                console.log('✅ DRM token address force updated to:', window.CONTRACT_ADDRESSES.DREAMLE_TOKEN);
            }
        }
    </script>

    <!-- Phase 2: Network and core functions -->
    <script src="js/auto-network-switch.js"></script>
    <script src="js/network-helper.js"></script>
    <script src="js/mobile-wallet-fix.js"></script>
    <script src="js/core-functions.js"></script>

    <!-- API 适配器已移除 - 使用直连 RPC 提升性能 -->
    <!-- 性能提升: 269ms → 69ms (74% 提升) -->

    <!-- 额外功能模块 - 续费、管理员功能等 -->
    <script src="js/additional-functions.js"></script>

    <!-- 管理员功能模块 -->
    <script src="js/admin-functions.js"></script>

    <!-- 邀请系统 -->
    <script src="js/referral-system.js"></script>



    <!-- External RPC management scripts removed, using built-in dual-endpoint manager -->

    <!-- Phased page initialization -->
    <script>
        console.log('🚀 Dreamle Mining Platform loading...');

        // Initialization state tracking
        window.initializationState = {
            web3Loaded: false,
            configLoaded: false,
            coreFunctionsLoaded: false,
            rpcManagerLoaded: false,
            allReady: false
        };

        // Phase 1: Check if basic configuration is loaded
        function checkBasicConfigLoaded() {
            const hasABI = typeof window.UNIFIED_SYSTEM_V16_ABI !== 'undefined';
            const hasConfig = typeof window.NETWORK_CONFIG !== 'undefined';
            const hasWeb3 = typeof Web3 !== 'undefined';

            if (hasABI && hasConfig && hasWeb3) {
                console.log('✅ Phase 1 completed: Basic configuration loaded');
                window.initializationState.configLoaded = true;
                initializeWeb3();
                return true;
            }
            return false;
        }

        // Phase 2: Initialize Web3
        function initializeWeb3() {
            console.log('🔧 Phase 2: Initializing Web3...');

            if (typeof Web3 !== 'undefined') {
                console.log('✅ Web3 library loaded');

                // Initialize Web3 instance
                if (window.ethereum) {
                    window.web3 = new Web3(window.ethereum);
                    console.log('✅ Web3 initialized using MetaMask provider');
                    window.initializationState.web3Loaded = true;
                    checkCoreFunctionsReady();
                } else {
                    // Use dual-endpoint Web3 manager
                    console.log('🔍 MetaMask not detected, using dual-endpoint RPC...');
                    initializeBackupWeb3().then(() => {
                        window.initializationState.web3Loaded = true;
                        console.log('✅ Dual-endpoint Web3 initialization completed');
                        checkCoreFunctionsReady();
                    }).catch(error => {
                        console.error('❌ Dual-endpoint Web3 initialization failed:', error);
                        // Continue even if failed, use default configuration
                        window.initializationState.web3Loaded = true;
                        checkCoreFunctionsReady();
                    });
                }
            }
        }

        // Phase 3: Check if core functions are ready
        function checkCoreFunctionsReady() {
            if (typeof window.connectWallet === 'function') {
                console.log('✅ Phase 3 completed: Core functions ready');
                window.initializationState.coreFunctionsLoaded = true;
                initializeRPCManagement();
            } else {
                console.log('⏳ Waiting for core functions to load...');
                setTimeout(checkCoreFunctionsReady, 500);
            }
        }

        // Phase 4: Initialize simplified RPC management
        function initializeRPCManagement() {
            console.log('🔧 Phase 4: Initializing dual-endpoint RPC management...');

            // Update network status display
            updateNetworkDisplay();

            // Start simplified RPC management system
            if (window.initializationState.web3Loaded && window.initializationState.coreFunctionsLoaded) {
                startSimpleRPCManagement();
                window.initializationState.rpcManagerLoaded = true;
                window.initializationState.allReady = true;
                console.log('🎉 All system initialization completed!');
            }
        }

        // Update network status display
        function updateNetworkDisplay() {
            const networkNameElement = document.getElementById('networkName');
            const networkDotElement = document.getElementById('networkDot');
            if (networkNameElement) {
                networkNameElement.textContent = 'BSC Mainnet';
                networkNameElement.style.color = '#00ff88';
            }
            if (networkDotElement) {
                networkDotElement.style.backgroundColor = '#00ff88';
                networkDotElement.classList.add('connected');
            }
        }

        // Start initialization after page loading is complete
        window.addEventListener('load', function() {
            console.log('📄 Page DOM loading completed, starting phased initialization...');

            // Give scripts some time to load
            setTimeout(() => {
                if (!checkBasicConfigLoaded()) {
                    console.log('⏳ Basic configuration not ready, waiting...');
                    // Retry check
                    const retryInterval = setInterval(() => {
                        if (checkBasicConfigLoaded()) {
                            clearInterval(retryInterval);
                        }
                    }, 500);
                }
            }, 100);
        });
    </script>

    <!-- Remove complex scripts -->

    <script>
        // 3D background effects
        function init3DBackground() {
            const canvas = document.getElementById('bg3d');
            if (!canvas || typeof THREE === 'undefined') {
                console.log('3D background disabled - Three.js not available');
                return;
            }

            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ canvas: canvas, alpha: true });

            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 0);

            // Create particles - fixed position particle system
            const geometry = new THREE.BufferGeometry();
            const vertices = [];
            for (let i = 0; i < 1000; i++) {
                // Use fixed grid pattern instead of random positions
                const x = (i % 20 - 10) * 100;
                const y = (Math.floor(i / 20) % 20 - 10) * 100;
                const z = (Math.floor(i / 400) - 1.25) * 100;
                vertices.push(x, y, z);
            }
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));

            const material = new THREE.PointsMaterial({ color: 0x00ff88, size: 2 });
            const particles = new THREE.Points(geometry, material);
            scene.add(particles);

            camera.position.z = 1000;

            function animate() {
                requestAnimationFrame(animate);
                particles.rotation.x += 0.001;
                particles.rotation.y += 0.002;
                renderer.render(scene, camera);
            }
            animate();

            // Respond to window size changes
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        }

        // All UI functions are defined in production functions file

        // Force display dashboard
        function forceDisplayDashboard() {
            console.log('🚨 Force displaying dashboard...');

            // Hide all tabs
            const allTabs = document.querySelectorAll('.tab-content');
            allTabs.forEach(tab => {
                tab.style.display = 'none';
                tab.classList.remove('active');
            });

            // Show dashboard
            const dashboard = document.getElementById('dashboard');
            if (dashboard) {
                dashboard.style.display = 'block';
                dashboard.classList.add('active');
                console.log('✅ Dashboard force display successful');
            } else {
                console.error('❌ Dashboard element not found');
            }

            // Set active button
            const dashboardBtn = document.querySelector('[data-tab="dashboard"]');
            if (dashboardBtn) {
                document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
                dashboardBtn.classList.add('active');
                console.log('✅ Dashboard button set to active state');
            } else {
                console.error('❌ Dashboard button not found');
            }
        }

        // Start simplified RPC management
        function startSimpleRPCManagement() {
            console.log('🚀 Starting dual-endpoint RPC management system...');

            // Initialize RPC status display
            window.updateRPCStatus('info', 'Detecting Network...', null);

            setTimeout(() => {
                // Check dual-endpoint connection status
                const status = window.web3Manager.getConnectionStatus();

                if (status.both) {
                    window.updateRPCStatus('excellent', 'HTTP + WebSocket dual endpoints connected', null);
                    console.log('✅ Dual endpoints connection successful');
                } else if (status.http) {
                    window.updateRPCStatus('good', 'HTTP endpoint connected', null);
                    console.log('✅ HTTP endpoint connection successful');
                } else {
                    window.updateRPCStatus('error', 'Network Connection Failed', null);
                    console.error('❌ All endpoints connection failed');
                }

                // Start simple connection monitoring
                startConnectionMonitoring();
            }, 1000);
        }

        // Start simplified connection monitoring
        function startConnectionMonitoring() {
            console.log('📊 Starting dual-endpoint connection monitoring...');

            // Periodically check connection status
            setInterval(async () => {
                try {
                    const httpWeb3 = window.web3Manager.getHttpWeb3();
                    const wsWeb3 = window.web3Manager.getWsWeb3();

                    let httpStatus = false;
                    let wsStatus = false;
                    let latency = null;

                    // Test HTTP connection
                    if (httpWeb3) {
                        try {
                            const startTime = Date.now();
                            const chainId = await Promise.race([
                                httpWeb3.eth.getChainId(),
                                new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))
                            ]);

                            if (Number(chainId) === 56) { // BSC Mainnet
                                httpStatus = true;
                                latency = Date.now() - startTime;
                            }
                        } catch (error) {
                            console.warn('HTTP connection test failed:', error.message);
                        }
                    }

                    // Test WebSocket connection
                    if (wsWeb3) {
                        try {
                            const wsChainId = await Promise.race([
                                wsWeb3.eth.getChainId(),
                                new Promise((_, reject) => setTimeout(() => reject(new Error('WebSocket timeout')), 3000))
                            ]);

                            if (Number(wsChainId) === 56) { // BSC Mainnet
                                wsStatus = true;
                            }
                        } catch (error) {
                            console.warn('WebSocket connection test failed:', error.message);
                        }
                    }

                    // Update status display
                    if (httpStatus && wsStatus) {
                        window.updateRPCStatus('excellent', `Ankr dual endpoints connected`, latency);
                    } else if (httpStatus) {
                        window.updateRPCStatus('good', `Ankr HTTP connected`, latency);
                    } else {
                        window.updateRPCStatus('error', 'Network Connection Error', null);
                    }

                } catch (error) {
                    console.error('Connection monitoring error:', error);
                    window.updateRPCStatus('error', 'Monitoring system error', null);
                }
            }, 60000); // Check every minute

            // Execute check immediately once
            setTimeout(async () => {
                try {
                    const httpWeb3 = window.web3Manager.getHttpWeb3();
                    if (httpWeb3) {
                        const startTime = Date.now();
                        const chainId = await httpWeb3.eth.getChainId();
                        if (Number(chainId) === 56) { // BSC Mainnet
                            const latency = Date.now() - startTime;
                            const status = window.web3Manager.getConnectionStatus();
                            if (status.both) {
                                window.updateRPCStatus('excellent', `BSC Mainnet dual endpoints connected`, latency);
                            } else {
                                window.updateRPCStatus('good', `Ankr HTTP connected`, latency);
                            }
                        }
                    }
                } catch (error) {
                    console.warn('Initial connection check failed:', error);
                }
            }, 2000);
        }

        // Complex RPC monitoring functions removed, using simplified dual-endpoint management

        // Update RPC status display function - display disabled
        window.updateRPCStatus = function(status, message, responseTime) {
            // Status display disabled, no UI updates performed
            return;
            const rpcIndicator = document.getElementById('rpcIndicator');
            const rpcText = document.getElementById('rpcText');
            const serverStatusDetail = document.getElementById('serverStatusDetail');

            if (!rpcIndicator || !rpcText) return;

            let indicator = '🔍';
            let color = '#888';
            let detailText = '';

            switch (status) {
                case 'excellent':
                    indicator = '🟢';
                    color = '#00ff88';
                    detailText = responseTime ? `${responseTime}ms` : '';
                    break;
                case 'good':
                    indicator = '🔵';
                    color = '#17a2b8';
                    detailText = responseTime ? `${responseTime}ms` : '';
                    break;
                case 'fair':
                    indicator = '🟡';
                    color = '#ffc107';
                    detailText = responseTime ? `${responseTime}ms` : '';
                    break;
                case 'poor':
                    indicator = '🟠';
                    color = '#fd7e14';
                    detailText = responseTime ? `${responseTime}ms` : '';
                    break;
                case 'error':
                    indicator = '🔴';
                    color = '#dc3545';
                    detailText = 'Server Busy';
                    break;
                case 'testing':
                    indicator = '🔄';
                    color = '#6c757d';
                    detailText = 'Detecting...';
                    break;
                default:
                    indicator = '🔍';
                    color = '#888';
                    detailText = 'Detecting Network...';
            }

            rpcIndicator.textContent = indicator;
            rpcText.textContent = message || 'Network Status';
            rpcText.style.color = color;

            if (serverStatusDetail) {
                if (detailText) {
                    serverStatusDetail.textContent = detailText;
                    serverStatusDetail.style.display = 'block';
                } else {
                    serverStatusDetail.style.display = 'none';
                }
            }
        };

        // Listen to RPC health status update events
        window.addEventListener('rpcHealthUpdate', function(event) {
            const { healthyNodes, bestNode, report } = event.detail;

            if (healthyNodes === 0) {
                window.updateRPCStatus('error', 'All RPC nodes unavailable', null);
                // Show error message
                if (typeof window.showMessage === 'function') {
                    window.showMessage('Network connection error, attempting to recover...', 'error');
                }
            } else if (bestNode) {
                // Determine status based on latency
                let status, latency;
                if (bestNode.latency !== undefined) {
                    latency = bestNode.latency;
                } else if (bestNode.responseTime !== undefined) {
                    latency = bestNode.responseTime;
                } else {
                    latency = null;
                }

                if (latency !== null) {
                    status = latency < 500 ? 'excellent' :
                             latency < 1500 ? 'good' :
                             latency < 3000 ? 'fair' : 'poor';
                } else {
                    status = 'unknown';
                }

                const nodeName = bestNode.name || 'Best Node';
                window.updateRPCStatus(status, `${nodeName} (${healthyNodes} available)`, latency);

                // Show success message if network recovered
                if (window.lastRPCStatus === 'error' && typeof window.showMessage === 'function') {
                    window.showMessage('Network connection restored', 'success');
                }
            }

            // Record current status
            window.lastRPCStatus = healthyNodes === 0 ? 'error' : 'healthy';
        });

        // Immediately define global wallet connection function (backup)
        window.connectWallet = window.connectWallet || async function() {
            console.log('🔗 Backup wallet connection function called');

            if (!window.ethereum) {
                alert('Please install MetaMask wallet');
                return false;
            }

            try {
                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });

                if (accounts.length > 0) {
                    console.log('✅ Wallet connection successful:', accounts[0]);

                    // Update UI display
                    const walletAddress = document.getElementById('walletAddress');
                    const walletAddressMobile = document.getElementById('walletAddressMobile');
                    const shortAddress = accounts[0].substring(0, 6) + '...' + accounts[0].substring(38);

                    if (walletAddress) walletAddress.textContent = shortAddress;
                    if (walletAddressMobile) walletAddressMobile.textContent = shortAddress;

                    // Update button text
                    const connectBtn = document.getElementById('connectWalletBtn');
                    const connectBtnMobile = document.getElementById('connectWalletBtnMobile');
                    if (connectBtn) connectBtn.textContent = '✅ Connected';
                    if (connectBtnMobile) connectBtnMobile.textContent = '✅ Connected';

                    return true;
                } else {
                    console.log('❌ User rejected connection');
                    return false;
                }
            } catch (error) {
                console.error('❌ Wallet connection failed:', error);
                alert('Wallet connection failed: ' + error.message);
                return false;
            }
        };

        // Immediately define global tab switching function
        window.switchTab = function(tabName) {
            console.log('🔄 Switching to tab:', tabName);

            // 移除所有按钮的active类
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });

            // 添加当前按钮的active类
            const activeBtn = document.querySelector(`[data-tab="${tabName}"]`);
            if (activeBtn) {
                activeBtn.classList.add('active');
            }

            // 隐藏所有标签内容
            document.querySelectorAll('.tab-content').forEach(content => {
                content.style.display = 'none';
                content.classList.remove('active');
            });

            // 显示目标标签内容
            const targetContent = document.getElementById(tabName);
            if (targetContent) {
                targetContent.style.display = 'block';
                targetContent.classList.add('active');
                console.log('✅ Tab switch successful:', tabName);

                // 根据标签类型执行特定初始化
                if (tabName === 'miners') {
                    // 刷新矿机数据
                    setTimeout(() => {
                        if (typeof window.loadUserData === 'function') {
                            window.loadUserData();
                        }
                    }, 100);
                } else if (tabName === 'dashboard') {
                    // 刷新仪表板数据
                    setTimeout(() => {
                        if (typeof window.updateDashboard === 'function') {
                            window.updateDashboard();
                        }
                    }, 100);
                }
            } else {
                console.error('❌ Tab content not found:', tabName);
            }
        };

        // Run force display immediately
        forceDisplayDashboard();

        // Simplified page initialization
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('🚀 Dreamle Mining Platform loading completed');

            // Show dashboard
            forceDisplayDashboard();

            // Delayed initialization of copy button event listeners
            setTimeout(() => {
                const copyLinkBtn = document.getElementById('copyLinkBtn');
                if (copyLinkBtn) {
                    copyLinkBtn.addEventListener('click', function() {
                        if (window.copyReferralLink && typeof window.copyReferralLink === 'function') {
                            window.copyReferralLink();
                        } else {
                            console.error('❌ copyReferralLink function not found');
                        }
                    });
                    console.log('✅ Copy button event listeners added');
                }
            }, 2000); // Delay 2 seconds to ensure all scripts are loaded

            // Initialize 3D background
            try {
                init3DBackground();
            } catch (error) {
                console.log('3D background initialization failed:', error);
            }

            // Listen to wallet account changes
            if (window.ethereum) {
                window.ethereum.on('accountsChanged', async function(accounts) {
                    console.log('👤 Account changed:', accounts);
                    if (accounts.length > 0) {
                        console.log('🔄 Account changed, reconnecting...');
                        if (typeof window.connectWallet === 'function') {
                            await window.connectWallet();
                        }
                    } else {
                        console.log('🔌 Wallet disconnected');
                        if (typeof window.disconnectWallet === 'function') {
                            window.disconnectWallet();
                        }
                    }
                });

                window.ethereum.on('chainChanged', function(chainId) {
                    console.log('🔗 Network changed:', chainId);
                    window.location.reload();
                });
            }

            // Check if wallet is connected, if so automatically load data
            setTimeout(async () => {
                if (window.ethereum && window.ethereum.selectedAddress) {
                    console.log('🔍 Detected connected wallet, auto-loading data...');
                    try {
                        if (typeof window.connectWallet === 'function' && !window.isConnected) {
                            console.log('🔄 Auto-connecting wallet on page load...');
                            await window.connectWallet();
                        } else if (window.isConnected) {
                            console.log('✅ Wallet already connected, skip auto-connection on page load');
                        }
                    } catch (error) {
                        console.log('⚠️ Auto wallet connection failed:', error);
                    }
                }
            }, 1000);

            // Debug function: Check if all necessary variables are loaded
            function checkRequiredVariables() {
                console.log('🔍 Checking required variables loading status:');
                console.log('  - window.CONTRACT_ADDRESSES:', !!window.CONTRACT_ADDRESSES);
                console.log('  - window.ERC20_ABI:', !!window.ERC20_ABI);
                console.log('  - window.UNIFIED_SYSTEM_V16_ABI:', !!window.UNIFIED_SYSTEM_V16_ABI);
                console.log('  - window.NETWORK_CONFIG:', !!window.NETWORK_CONFIG);
                console.log('  - window.connectWallet:', typeof window.connectWallet);
                console.log('  - window.loadUserData:', typeof window.loadUserData);

                if (window.CONTRACT_ADDRESSES) {
                    console.log('📋 Contract addresses:');
                    console.log('  - UNIFIED_SYSTEM:', window.CONTRACT_ADDRESSES.UNIFIED_SYSTEM);
                    console.log('  - DREAMLE_TOKEN:', window.CONTRACT_ADDRESSES.DREAMLE_TOKEN);
                    console.log('  - USDT_TOKEN:', window.CONTRACT_ADDRESSES.USDT_TOKEN);
                }

                if (window.NETWORK_CONFIG && window.NETWORK_CONFIG.BSC_MAINNET) {
                    console.log('🌐 Network configuration: BSC Mainnet loaded');
                } else {
                    console.warn('⚠️ BSC Mainnet configuration not loaded');
                }
            }

            // Smart wait for all functions to load before initializing event listeners
            function waitForFunctionsAndInitialize() {
                let attempts = 0;
                const maxAttempts = 15;

                function checkAndInit() {
                    attempts++;

                    const allFunctionsLoaded = window.CONTRACT_ADDRESSES &&
                                             window.ERC20_ABI &&
                                             window.UNIFIED_SYSTEM_V16_ABI &&
                                             window.NETWORK_CONFIG &&
                                             window.NETWORK_CONFIG.BSC_TESTNET &&
                                             window.CORE_FUNCTIONS_READY === true;

                    if (allFunctionsLoaded) {
                        console.log('✅ All functions and variables loaded, initializing event listeners');
                        checkRequiredVariables();
                        initializeEventListeners();

                        // Show system ready status - display disabled
                        // const statusElements = document.querySelectorAll('.system-status');
                        // statusElements.forEach(el => {
                        //     el.textContent = '✅ System Ready';
                        //     el.style.color = '#28a745';
                        // });

                        // Enable all buttons
                        const buttons = document.querySelectorAll('button[disabled]');
                        buttons.forEach(btn => btn.disabled = false);

                    } else if (attempts < maxAttempts) {
                        console.log(`⏳ Waiting for functions to load... (${attempts}/${maxAttempts})`);
                        setTimeout(checkAndInit, 1000);
                    } else {
                        console.warn('⚠️ Some functions not loaded, force initialize event listeners');
                        checkRequiredVariables();
                        initializeEventListeners();
                    }
                }

                checkAndInit();
            }

            waitForFunctionsAndInitialize();












            // Function to initialize all event listeners
            function initializeEventListeners() {
                console.log('🔧 Starting to initialize event listeners...');

            // Price conversion tool - fix price display issues
            const PRICE_UTILS = {
                // Convert Wei price returned by contract to USDT display
                weiToUSDT: (weiPrice) => {
                    // Based on Hardhat test results: 12000 Wei = 12 USDT
                    return parseFloat(weiPrice) / 1000;
                },

                // Format price display
                formatPrice: (weiPrice) => {
                    const usdtPrice = PRICE_UTILS.weiToUSDT(weiPrice);
                    return `${usdtPrice} USDT`;
                }
            };

            // Export to global scope for console use
            window.PRICE_UTILS = PRICE_UTILS;

            // Clear cache button event
            const clearCacheBtn = document.getElementById('clearCacheBtn');
            if (clearCacheBtn) {
                clearCacheBtn.addEventListener('click', async function() {
                    console.log('🔄 Clear cache button clicked');

                    try {
                        // 缓存清理功能已移除（PWA已禁用）

                        // Clear localStorage
                        if (typeof Storage !== 'undefined') {
                            localStorage.clear();
                            console.log('✅ LocalStorage cleared');
                        }

                        // Display success message
                        if (typeof window.showMessage === 'function') {
                            window.showMessage('Cache cleared, page will refresh', 'success');
                        } else {
                            alert('Cache cleared, page will refresh');
                        }

                        // Delayed page refresh
                        setTimeout(() => {
                            window.location.reload(true);
                        }, 1500);

                    } catch (error) {
                        console.error('❌ Clear cache failed:', error);
                        if (typeof window.showMessage === 'function') {
                            window.showMessage('Failed to clear cache: ' + error.message, 'error');
                        } else {
                            alert('Failed to clear cache: ' + error.message);
                        }
                    }
                });
            }

            // Mobile wallet connection is now handled by Modern FAB

            // Purchase button event - with retry mechanism
            const purchaseUsdtBtn = document.getElementById('purchaseUsdtBtn');
            if (purchaseUsdtBtn) {
                purchaseUsdtBtn.addEventListener('click', async function() {
                    console.log('🔘 USDT purchase button clicked');

                    // Function call with retry
                    async function tryPurchase(retries = 3) {
                        if (typeof window.purchaseMiner === 'function') {
                            const level = window.selectedLevel || 1;
                            await window.purchaseMiner(level, 'USDT');
                        } else if (retries > 0) {
                            console.log(`⏳ purchaseMiner function not ready, retrying in ${retries} seconds...`);
                            setTimeout(() => tryPurchase(retries - 1), 1000);
                        } else {
                            console.error('❌ purchaseMiner function not found');
                            alert('Purchase function not ready, please refresh and try again');
                        }
                    }

                    await tryPurchase();
                });
            }

            const purchaseDrmBtn = document.getElementById('purchaseDrmBtn');
            if (purchaseDrmBtn) {
                purchaseDrmBtn.addEventListener('click', async function() {
                    console.log('🔘 DRM purchase button clicked');

                    // Function call with retry
                    async function tryPurchase(retries = 3) {
                        if (typeof window.purchaseMiner === 'function') {
                            const level = window.selectedLevel || 1;
                            await window.purchaseMiner(level, 'DRM');
                        } else if (retries > 0) {
                            console.log(`⏳ purchaseMiner function not ready, retrying in ${retries} seconds...`);
                            setTimeout(() => tryPurchase(retries - 1), 1000);
                        } else {
                            console.error('❌ purchaseMiner 函数未找到');
                            alert('Purchase function not ready, please refresh and try again');
                        }
                    }

                    await tryPurchase();
                });
            }

            // 授权USDT按钮事件 - 带重试机制
            const authorizeUsdtBtn = document.getElementById('authorizeUsdtBtn');
            if (authorizeUsdtBtn) {
                authorizeUsdtBtn.addEventListener('click', async function() {
                    console.log('🔘 授权USDT按钮点击');

                    // 带重试的函数调用
                    async function tryAuthorize(retries = 3) {
                        if (typeof window.authorizeUSDT === 'function') {
                            await window.authorizeUSDT();
                        } else if (retries > 0) {
                            console.log(`⏳ authorizeUSDT 函数未就绪，${retries}秒后重试...`);
                            setTimeout(() => tryAuthorize(retries - 1), 1000);
                        } else {
                            console.error('❌ authorizeUSDT 函数未找到');
                            alert('Authorization function not ready, please refresh and try again');
                        }
                    }

                    await tryAuthorize();
                });
            }

            // DRM授权按钮事件 - 使用API方法
            const authorizeBtn = document.getElementById('authorizeBtn');
            if (authorizeBtn) {
                authorizeBtn.addEventListener('click', async function() {
                    console.log('🔘 DRM授权按钮点击');

                    // 优先使用API方法
                    if (typeof window.authorizeDRM === 'function') {
                        try {
                            await window.authorizeDRM('1000000000000000000000000'); // 1,000,000 DRM
                        } catch (error) {
                            console.error('❌ API授权失败，尝试使用原始方法:', error);
                            // 回退到原始方法
                            if (typeof window.authorizeToken === 'function') {
                                await window.authorizeToken();
                            }
                        }
                    } else if (typeof window.authorizeToken === 'function') {
                        await window.authorizeToken();
                    } else {
                        console.error('❌ 授权函数未找到');
                        alert('Authorization function not ready, please refresh and try again');
                    }
                });
            }

            // 一键授权购买按钮事件 - 带重试机制
            const oneClickPurchaseBtn = document.getElementById('oneClickPurchaseBtn');
            if (oneClickPurchaseBtn) {
                oneClickPurchaseBtn.addEventListener('click', async function() {
                    console.log('🔘 一键授权购买按钮点击');

                    // 带重试的函数调用
                    async function tryOneClickPurchase(retries = 3) {
                        if (typeof window.oneClickPurchase === 'function') {
                            const level = window.selectedLevel || 1;
                            await window.oneClickPurchase(level);
                        } else if (retries > 0) {
                            console.log(`⏳ oneClickPurchase 函数未就绪，${retries}秒后重试...`);
                            setTimeout(() => tryOneClickPurchase(retries - 1), 1000);
                        } else {
                            console.error('❌ oneClickPurchase 函数未找到');
                            alert('One-click purchase not ready, please refresh and try again');
                        }
                    }

                    await tryOneClickPurchase();
                });
            }

            // 奖励领取按钮事件 - 带重试机制
            const claimRewardsBtn = document.getElementById('claimRewardsBtn');
            if (claimRewardsBtn) {
                claimRewardsBtn.addEventListener('click', async function() {
                    console.log('🔘 奖励领取按钮点击');

                    // 带重试的函数调用
                    async function tryClaimRewards(retries = 3) {
                        if (typeof window.claimRewards === 'function') {
                            await window.claimRewards();
                        } else if (retries > 0) {
                            console.log(`⏳ claimRewards 函数未就绪，${retries}秒后重试...`);
                            setTimeout(() => tryClaimRewards(retries - 1), 1000);
                        } else {
                            console.error('❌ claimRewards 函数未找到');
                            alert('Reward claim function not ready, please refresh and try again');
                        }
                    }

                    await tryClaimRewards();
                });
            }

            // Simplified tab switching - execute immediately
            console.log('🔧 Initializing tab switching functionality...');

            // Create global tab switching function
            window.switchTab = function(tabName) {
                console.log('🔄 Switching to tab:', tabName);

                // Remove active class from all buttons
                document.querySelectorAll('.tab-btn').forEach(btn => {
                    btn.classList.remove('active');
                });

                // Add active class to current button
                const activeBtn = document.querySelector(`[data-tab="${tabName}"]`);
                if (activeBtn) {
                    activeBtn.classList.add('active');
                }

                // Hide all tab content
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.style.display = 'none';
                    content.classList.remove('active');
                });

                // Show target tab content
                const targetContent = document.getElementById(tabName);
                if (targetContent) {
                    targetContent.style.display = 'block';
                    targetContent.classList.add('active');
                    console.log('✅ Tab switch successful:', tabName);
                } else {
                    console.error('❌ Tab content not found:', tabName);
                }
            };

            // Add click events to all tab buttons
            const tabButtons = document.querySelectorAll('.tab-btn');
            console.log('🔍 Found tab buttons count:', tabButtons.length);

            tabButtons.forEach((btn, index) => {
                const tabName = btn.dataset.tab;
                console.log(`🔍 Tab button ${index + 1}:`, tabName, btn.textContent.trim());

                // 移除旧的事件监听器
                btn.onclick = null;

                // 添加新的点击事件
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('🔘 Tab button clicked:', tabName);
                    window.switchTab(tabName);
                });

                // 确保按钮可点击
                btn.style.cursor = 'pointer';
                btn.style.pointerEvents = 'auto';
            });

            // 矿机等级选择和图片切换
            const minerLevelSelect = document.getElementById('minerLevelSelect');
            if (minerLevelSelect) {
                minerLevelSelect.addEventListener('change', function() {
                    const level = parseInt(this.value);
                    window.selectedLevel = level;
                    console.log('🔧 选择矿机等级:', level);

                    // 更新矿机图片
                    updateMinerPreview(level);
                });

                // 初始化默认等级
                window.selectedLevel = 1;
                updateMinerPreview(1);
            }

            // 更新矿机预览图片和信息
            function updateMinerPreview(level) {
                const minerPreview = document.getElementById('minerPreview');
                const previewLevelBadge = document.getElementById('previewLevelBadge');
                const previewHashpower = document.getElementById('previewHashpower');
                const previewPrice = document.getElementById('previewPrice');
                const previewDrmPrice = document.getElementById('previewDrmPrice');
                const usdtPrice = document.getElementById('usdtPrice');

                // 矿机等级数据
                const minerData = {
                    1: { hashpower: 40, price: 100, drmPrice: 1000 },
                    2: { hashpower: 130, price: 300, drmPrice: 3000 },
                    3: { hashpower: 370, price: 800, drmPrice: 8000 },
                    4: { hashpower: 780, price: 1500, drmPrice: 15000 },
                    5: { hashpower: 1450, price: 2500, drmPrice: 25000 },
                    6: { hashpower: 2600, price: 4000, drmPrice: 40000 },
                    7: { hashpower: 4500, price: 6000, drmPrice: 60000 },
                    8: { hashpower: 6400, price: 8000, drmPrice: 80000 }
                };

                const data = minerData[level] || minerData[1];

                if (minerPreview) {
                    // 使用优化后的图片路径（WebP格式，节省94%流量）
                    const imagePath = window.imageOptimizer && window.imageOptimizer.supportsWebP
                        ? `images/miners/${level}.webp`
                        : `images/miners/${level}.png`;

                    minerPreview.src = imagePath;
                    console.log('🖼️ Updating miner image:', imagePath);

                    // 添加加载错误处理
                    minerPreview.onerror = function() {
                        console.warn('⚠️ 矿机图片加载失败，尝试降级');
                        if (this.src.endsWith('.webp')) {
                            this.src = this.src.replace('.webp', '.png');
                        } else {
                            this.src = 'images/miners/1.png';
                        }
                    };
                }

                if (previewLevelBadge) {
                    previewLevelBadge.textContent = `LV.${level}`;

                    // 更新等级徽章颜色
                    const colors = {
                        1: '#00d4ff',
                        2: '#00ff88',
                        3: '#ffaa00',
                        4: '#ff6b6b',
                        5: '#9c27b0',
                        6: '#ff5722',
                        7: '#795548',
                        8: '#607d8b'
                    };

                    previewLevelBadge.style.background = colors[level] || '#00d4ff';
                    previewLevelBadge.style.color = level >= 4 ? '#fff' : '#000';
                }

                // 更新矿机统计信息
                if (previewHashpower) {
                    previewHashpower.textContent = data.hashpower;
                }

                if (previewPrice) {
                    previewPrice.textContent = data.price;
                }

                if (previewDrmPrice) {
                    previewDrmPrice.textContent = data.drmPrice;
                }

                if (usdtPrice) {
                    usdtPrice.textContent = `${data.price} USDT`;
                }

                // 更新DRM价格显示
                const drmPrice = document.getElementById('drmPrice');
                if (drmPrice) {
                    drmPrice.textContent = `${data.price} DRM`;
                }

                // 更新授权按钮文本
                const authorizeBtn = document.getElementById('authorizeUsdtBtn');
                if (authorizeBtn) {
                    authorizeBtn.innerHTML = `🔐 Authorize ${data.price} USDT`;
                }

                // 更新购买按钮文本
                const purchaseBtn = document.getElementById('usdtBtnText');
                if (purchaseBtn) {
                    purchaseBtn.textContent = `💳 Buy LV.${level} with USDT`;
                }

                const purchaseDrmBtn = document.getElementById('purchaseDrmBtn');
                if (purchaseDrmBtn) {
                    purchaseDrmBtn.innerHTML = `💎 Buy LV.${level} with DRM`;
                }

                // 更新全局选择的等级
                window.selectedLevel = level;

                console.log(`🎯 Miner level ${level} preview updated: ${data.hashpower} TH/s, ${data.price} USDT, ${data.drmPrice} DRM`);
            }

            // 从选择框更新矿机预览
            function updateMinerPreviewFromSelect() {
                const selectElement = document.getElementById('minerLevelSelect');
                if (selectElement) {
                    const selectedLevel = parseInt(selectElement.value);
                    updateMinerPreview(selectedLevel);
                    console.log(`🔄 从选择框更新矿机预览: 等级 ${selectedLevel}`);
                }
            }

            // 将函数导出到全局作用域
            window.updateMinerPreview = updateMinerPreview;
            window.updateMinerPreviewFromSelect = updateMinerPreviewFromSelect;

            // Modern FAB functionality
            function createModernFAB() {
                // Remove existing FAB if any
                const existingFAB = document.querySelector('.modern-fab-container');
                if (existingFAB) {
                    existingFAB.remove();
                }

                // Create FAB container
                const fabContainer = document.createElement('div');
                fabContainer.className = 'modern-fab-container';
                fabContainer.innerHTML = `
                    <div class="modern-fab" id="modernFAB">
                        <svg class="fab-icon" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                        <span class="fab-text">Menu</span>

                        <div class="fab-actions">
                            <div class="fab-action connect-wallet" id="fabConnectWallet">
                                <svg class="fab-action-icon" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M21 18v1a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v1"/>
                                    <path d="M15 10l-4-4l-4 4"/>
                                    <path d="M11 16V6"/>
                                </svg>
                                <span>Connect Wallet</span>
                            </div>

                            <div class="fab-action" id="fabHome">
                                <svg class="fab-action-icon" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
                                </svg>
                                <span>Home</span>
                            </div>

                            <div class="fab-action" id="fabPlatform">
                                <svg class="fab-action-icon" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                </svg>
                                <span>Platform</span>
                            </div>
                        </div>
                    </div>
                `;

                document.body.appendChild(fabContainer);

                // Add event listeners
                const fab = document.getElementById('modernFAB');
                const connectWalletAction = document.getElementById('fabConnectWallet');
                const homeAction = document.getElementById('fabHome');
                const platformAction = document.getElementById('fabPlatform');

                let isExpanded = false;

                // Toggle FAB expansion
                fab.addEventListener('click', function(e) {
                    if (e.target.closest('.fab-action')) return; // Don't toggle if clicking on action

                    isExpanded = !isExpanded;
                    fab.classList.toggle('expanded', isExpanded);

                    console.log('🎯 FAB toggled:', isExpanded ? 'expanded' : 'collapsed');
                });

                // Connect Wallet action
                connectWalletAction.addEventListener('click', async function(e) {
                    e.stopPropagation();
                    console.log('🔗 FAB Connect Wallet clicked');

                    if (window.connectWallet && typeof window.connectWallet === 'function') {
                        try {
                            const result = await window.connectWallet();
                            console.log('✅ Wallet connected via FAB:', result);

                            // Update FAB icon to show connected state
                            if (result) {
                                connectWalletAction.innerHTML = `
                                    <svg class="fab-action-icon" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                    </svg>
                                    <span>✅ Connected</span>
                                `;
                            }
                        } catch (error) {
                            console.error('❌ FAB wallet connection failed:', error);
                            alert('Wallet connection failed: ' + error.message);
                        }
                    } else {
                        console.error('❌ connectWallet function not found');
                        alert('Wallet connection not ready, please refresh and try again');
                    }
                });

                // Home action
                homeAction.addEventListener('click', function(e) {
                    e.stopPropagation();
                    console.log('🏠 FAB Home clicked');
                    window.location.href = '/index.html';
                });

                // Platform action
                platformAction.addEventListener('click', function(e) {
                    e.stopPropagation();
                    console.log('⭐ FAB Platform clicked');
                    window.location.href = '/platform.html';
                });

                // Close FAB when clicking outside
                document.addEventListener('click', function(e) {
                    if (!fabContainer.contains(e.target) && isExpanded) {
                        isExpanded = false;
                        fab.classList.remove('expanded');
                    }
                });

                // Smart positioning based on scroll
                let lastScrollY = window.scrollY;
                let ticking = false;

                function updateFABPosition() {
                    const scrollY = window.scrollY;
                    const windowHeight = window.innerHeight;
                    const documentHeight = document.documentElement.scrollHeight;

                    // On mobile, adjust position based on scroll
                    if (window.innerWidth <= 768) {
                        if (scrollY > lastScrollY && scrollY > 100) {
                            // Scrolling down - move FAB up slightly
                            fabContainer.style.transform = 'translateY(-20px)';
                        } else {
                            // Scrolling up or at top - normal position
                            fabContainer.style.transform = 'translateY(0)';
                        }
                    }

                    lastScrollY = scrollY;
                    ticking = false;
                }

                function requestTick() {
                    if (!ticking) {
                        requestAnimationFrame(updateFABPosition);
                        ticking = true;
                    }
                }

                window.addEventListener('scroll', requestTick);

                console.log('✅ Modern FAB created and initialized');
                return fabContainer;
            }

            // Export to global scope
            window.createModernFAB = createModernFAB;

            // 立即创建 FAB（不等待）
            console.log('🎯 立即创建 Modern FAB...');
            createModernFAB();
            console.log('✅ Modern FAB 已创建');

            // 立即初始化矿机预览
            setTimeout(() => {
                if (typeof updateMinerPreview === 'function') {
                    updateMinerPreview(1);
                    console.log('🎯 Miner preview initialized');
                }
            }, 500);

            // Show dashboard by default
            const dashboardTab = document.getElementById('dashboard');
            if (dashboardTab) {
                dashboardTab.style.display = 'block';
                dashboardTab.classList.add('active');
                console.log('✅ Default dashboard display');
            }

            // 生产环境 - 移除所有测试和调试函数

            // 页面加载完成后的初始化
            setTimeout(() => {
                console.log('🚀 Page initialization completed');

                // 等待所有必要变量加载完成
                function waitForRequiredVariables(callback, maxAttempts = 10) {
                    let attempts = 0;

                    function check() {
                        attempts++;
                        const allLoaded = window.CONTRACT_ADDRESSES &&
                                        window.ERC20_ABI &&
                                        window.UNIFIED_SYSTEM_V16_ABI &&
                                        window.NETWORK_CONFIG &&
                                        window.NETWORK_CONFIG.BSC_TESTNET &&
                                        typeof window.connectWallet === 'function' &&
                                        typeof window.loadUserData === 'function';

                        if (allLoaded) {
                            console.log('✅ All required variables loaded');
                            callback();
                        } else if (attempts < maxAttempts) {
                            console.log(`⏳ 等待变量加载... (${attempts}/${maxAttempts})`);
                            setTimeout(check, 1000);
                        } else {
                            console.warn('⚠️ 部分变量未加载，强制继续');
                            callback();
                        }
                    }

                    check();
                }

                // 如果钱包已连接，自动加载数据
                if (window.ethereum && window.ethereum.selectedAddress) {
                    console.log('🔗 Detected connected wallet, waiting for variables to load before connecting...');
                    waitForRequiredVariables(() => {
                        if (typeof window.connectWallet === 'function' && !window.isConnected) {
                            console.log('🔄 Auto-connecting wallet...');
                            window.connectWallet();
                        } else if (window.isConnected) {
                            console.log('✅ 钱包已连接，跳过自动连接');
                        }
                    });
                }
            }, 1000);

            console.log('✅ Production mode initialization completed');

            } // 结束 initializeEventListeners 函数

            console.log('✅ Event listener initialization function definition completed');
        });

        // Global error handling
        window.addEventListener('error', function(e) {
            console.error('Global error:', e.error);
            if (typeof window.showMessage === 'function') {
                window.showMessage('Unknown error occurred, please refresh and try again', 'error');
            }
        });

        window.addEventListener('unhandledrejection', function(e) {
            console.error('Unhandled Promise rejection:', e.reason);
            if (typeof window.showMessage === 'function') {
                window.showMessage('Network request failed, please check connection', 'error');
            }
        });
    </script>

    </script>

    <!-- 移除设备体验管理器 -->

    <!-- PWA功能已移除 -->

    <!-- Mining Platform Redesign JavaScript -->
    <script>
        // Mobile menu and sync functions are defined in production functions

        // PWA功能已完全移除

        // 页面初始化
        document.addEventListener('DOMContentLoaded', function() {
            // 初始化网络统计数据
            if (window.initializeRealNetworkStats) {
                window.initializeRealNetworkStats();
                console.log('✅ Network statistics initialized on page load');
            }

            // 延迟更新网络统计显示
            setTimeout(() => {
                if (window.updateNetworkStatsDisplay) {
                    // 使用默认的网络统计数据
                    const defaultStats = ['95660', '6', '0'];
                    window.updateNetworkStatsDisplay(defaultStats);
                    console.log('✅ Network statistics display updated with default data');
                }
            }, 1000);

            // PWA功能已完全移除

            // Modern FAB 已在第一个 DOMContentLoaded 中创建，这里不需要重复创建
            console.log('ℹ️ Modern FAB 已在页面加载时创建');

            // 桌面端钱包连接按钮事件
            const connectWalletBtn = document.getElementById('connectWalletBtn');
            if (connectWalletBtn) {
                connectWalletBtn.addEventListener('click', async function() {
                    console.log('🔘 桌面端钱包连接按钮点击');

                    if (window.connectWallet && typeof window.connectWallet === 'function') {
                        console.log('✅ 使用主要的connectWallet函数');
                        try {
                            const result = await window.connectWallet();
                            console.log('✅ 钱包连接结果:', result);
                        } catch (error) {
                            console.error('❌ 钱包连接失败:', error);
                            alert('Wallet connection failed: ' + error.message);
                        }
                    } else {
                        console.error('❌ connectWallet函数未找到');
                        alert('Wallet connection not ready, please refresh and try again');
                    }
                });
            }

            // 钱包状态变化监听已在上面处理
        });

        // 钱包状态变化监听已在上面处理

        // 获取真实挖矿池数据的函数（通过API）
        async function getRealMiningPoolData() {
            console.log('🔍 获取真实挖矿池数据（通过API）...');

            try {
                // 优先使用API获取网络统计数据
                if (window.apiClient) {
                    try {
                        const response = await window.apiClient.get('/api/network/stats');
                        if (response.success && response.data) {
                            console.log('✅ 通过API获取数据成功', response.data);

                            // 转换API数据格式为前端期望的格式
                            const apiData = response.data;
                            return {
                                poolBalance: parseFloat(apiData.poolDRM || 0),
                                totalRewardsPaid: parseFloat(apiData.totalRewardsPaid || 0),
                                dailyOutput: 10.1, // 固定值
                                poolStatus: 'Excellent',
                                totalMiners: parseInt(apiData.totalMiners || 0),
                                totalHashPower: parseInt(apiData.totalNetworkHashPower || 0)
                            };
                        }
                    } catch (apiError) {
                        console.warn('⚠️ API获取失败，使用默认值:', apiError);
                    }
                }

                // 如果API不可用，返回默认值
                console.log('📊 使用默认数据');
                return {
                    poolBalance: 14290000,
                    totalRewardsPaid: 0,
                    dailyOutput: 10.1,
                    poolStatus: 'Excellent',
                    totalMiners: 3,
                    totalHashPower: 20274
                };

            } catch (error) {
                console.error('❌ 获取数据失败:', error);
                // 返回默认值
                return {
                    poolBalance: 14290000,
                    totalRewardsPaid: 0,
                    dailyOutput: 10.1,
                    poolStatus: 'Excellent',
                    totalMiners: 3,
                    totalHashPower: 20274
                };
            }
        }

        // 更新Mining Pool Status显示的函数
        async function updateMiningPoolDisplay() {
            console.log('🔧 更新Mining Pool Status显示...');

            try {
                // 获取真实数据
                const data = await getRealMiningPoolData();

                // 确保数据有效
                if (!data) {
                    console.warn('⚠️ 未获取到有效数据');
                    return;
                }

                // 更新Mining Pool Balance
                const miningPoolBalance = document.getElementById('miningPoolDrmBalance');
                if (miningPoolBalance && data.poolBalance !== undefined) {
                    const balanceValue = parseFloat(data.poolBalance) || 0;
                    miningPoolBalance.textContent = balanceValue.toLocaleString('en-US', {minimumFractionDigits: 1, maximumFractionDigits: 1});
                    miningPoolBalance.innerHTML = balanceValue.toLocaleString('en-US', {minimumFractionDigits: 1, maximumFractionDigits: 1});
                    console.log(`✅ 更新Mining Pool Balance: ${balanceValue.toLocaleString()} DRM`);
                }

                // 更新Total Rewards Paid
                const totalRewards = document.getElementById('totalRewardsPaid');
                if (totalRewards && data.totalRewardsPaid !== undefined) {
                    const rewardsValue = parseFloat(data.totalRewardsPaid) || 0;
                    totalRewards.textContent = rewardsValue.toFixed(1);
                    totalRewards.innerHTML = rewardsValue.toFixed(1);
                    console.log(`✅ 更新Total Rewards Paid: ${rewardsValue.toFixed(1)} DRM`);
                }

                // 更新Daily Mining Output
                const dailyOutput = document.getElementById('dailyMiningOutput');
                if (dailyOutput && data.dailyOutput !== undefined) {
                    const outputValue = parseFloat(data.dailyOutput) || 0;
                    dailyOutput.textContent = outputValue.toFixed(1);
                    dailyOutput.innerHTML = outputValue.toFixed(1);
                    console.log(`✅ 更新Daily Mining Output: ${outputValue.toFixed(1)} DRM`);
                }

                // 更新Pool Status
                const poolStatus = document.getElementById('poolHealthStatus');
                if (poolStatus && data.poolStatus) {
                    poolStatus.textContent = data.poolStatus;
                    poolStatus.innerHTML = data.poolStatus;
                    poolStatus.className = `stat-value pool-status-${data.poolStatus.toLowerCase()}`;
                    console.log(`✅ 更新Pool Status: ${data.poolStatus}`);
                }

                console.log('✅ Mining Pool Status更新完成');
            } catch (error) {
                console.error('❌ 更新Mining Pool显示失败:', error);
            }
        }

        // 页面加载完成后获取真实数据
        window.addEventListener('load', function() {
            setTimeout(updateMiningPoolDisplay, 2000);
            setTimeout(updateMiningPoolDisplay, 5000);
        });

        // 如果页面已经加载完成，立即执行
        if (document.readyState === 'complete') {
            setTimeout(updateMiningPoolDisplay, 1000);
        }

        // 定期更新已禁用 - 避免频繁请求RPC节点
        // setInterval(function() {
        //     console.log('🔄 定期更新挖矿池数据...');
        //     updateMiningPoolDisplay();
        // }, 30000); // 每30秒更新一次

        // 更新流动性池状态显示的函数
        function updateLiquidityPoolDisplay() {
            console.log('💧 更新流动性池状态显示...');

            // 设置USDT Pool Balance
            const poolUsdtBalance = document.getElementById('poolUsdtBalance');
            if (poolUsdtBalance) {
                poolUsdtBalance.textContent = '273140.00';
                poolUsdtBalance.innerHTML = '273140.00';
                console.log('✅ 更新USDT Pool Balance: 273140.00');
            }

            // 设置DRM Pool Balance（可以根据需要调整）
            const poolDrmBalance = document.getElementById('poolDrmBalance');
            if (poolDrmBalance) {
                poolDrmBalance.textContent = '0.00';
                poolDrmBalance.innerHTML = '0.00';
                console.log('✅ 更新DRM Pool Balance: 0.00');
            }

            console.log('✅ 流动性池状态更新完成');
        }

        // 页面加载时也更新流动性池状态
        window.addEventListener('load', function() {
            setTimeout(updateLiquidityPoolDisplay, 1500);
            setTimeout(updateLiquidityPoolDisplay, 4000);
        });

        // 如果页面已经加载完成，立即执行
        if (document.readyState === 'complete') {
            setTimeout(updateLiquidityPoolDisplay, 800);
        }

        // 定期更新已禁用 - 避免频繁请求RPC节点
        // setInterval(function() {
        //     updateLiquidityPoolDisplay();
        // }, 60000); // 每60秒更新一次

        // 导出函数供外部调用
        window.updateMiningPoolDisplay = updateMiningPoolDisplay;
        window.getRealMiningPoolData = getRealMiningPoolData;
        window.updateLiquidityPoolDisplay = updateLiquidityPoolDisplay;

        // 页面加载完成后初始化基本显示
        document.addEventListener('DOMContentLoaded', function() {
            console.log('📄 页面加载完成，初始化基本显示...');

            // 等待一小段时间确保所有脚本都已加载
            setTimeout(function() {
                if (typeof window.initializeBasicDisplay === 'function') {
                    window.initializeBasicDisplay();
                    console.log('✅ 基本显示初始化完成');
                } else {
                    console.warn('⚠️ initializeBasicDisplay 函数未找到');
                }
            }, 1000);
        });

        // ==================== 管理员UI辅助函数 ====================

        /**
         * 检查并显示管理员面板
         */
        window.checkAndShowAdminPanel = function() {
            if (window.isAdminUser && window.isAdminUser()) {
                const adminTabBtn = document.getElementById('adminTabBtn');
                if (adminTabBtn) {
                    adminTabBtn.style.display = 'block';
                    console.log('✅ 管理员面板已启用');
                }
            }
        };

        /**
         * 添加特殊推荐人UI
         */
        window.adminAddSpecialReferrer = async function() {
            const addressInput = document.getElementById('specialReferrerAddress');
            const address = addressInput.value.trim();

            if (!address) {
                window.showMessage('请输入推荐人地址', 'warning');
                return;
            }

            try {
                await window.addSpecialReferrer(address);
                addressInput.value = '';
            } catch (error) {
                console.error('添加失败:', error);
            }
        };

        /**
         * 移除特殊推荐人UI
         */
        window.adminRemoveSpecialReferrer = async function() {
            const addressInput = document.getElementById('specialReferrerAddress');
            const address = addressInput.value.trim();

            if (!address) {
                window.showMessage('请输入推荐人地址', 'warning');
                return;
            }

            try {
                await window.removeSpecialReferrer(address);
                addressInput.value = '';
            } catch (error) {
                console.error('移除失败:', error);
            }
        };

        /**
         * 注入流动性UI
         */
        window.adminInjectLiquidityUI = async function() {
            const usdtInput = document.getElementById('injectUsdtAmount');
            const drmInput = document.getElementById('injectDrmAmount');

            const usdtAmount = usdtInput.value.trim();
            const drmAmount = drmInput.value.trim();

            if (!usdtAmount || !drmAmount) {
                window.showMessage('请输入USDT和DRM数量', 'warning');
                return;
            }

            try {
                const usdtWei = window.web3.utils.toWei(usdtAmount, 'ether');
                const drmWei = window.web3.utils.toWei(drmAmount, 'ether');

                await window.adminInjectLiquidity(usdtWei, drmWei);

                usdtInput.value = '';
                drmInput.value = '';
            } catch (error) {
                console.error('注入失败:', error);
            }
        };

        /**
         * 管理员提取UI
         */
        window.adminWithdrawUI = async function() {
            const tokenSelect = document.getElementById('withdrawTokenAddress');
            const amountInput = document.getElementById('withdrawAmount');

            const tokenAddress = tokenSelect.value;
            const amount = amountInput.value.trim();

            if (!amount) {
                window.showMessage('请输入提取数量', 'warning');
                return;
            }

            try {
                const amountWei = window.web3.utils.toWei(amount, 'ether');
                await window.adminWithdraw(tokenAddress, amountWei);

                amountInput.value = '';
            } catch (error) {
                console.error('提取失败:', error);
            }
        };

        /**
         * 更新过期矿机UI
         */
        window.adminUpdateExpiredMinersUI = async function() {
            const addressInput = document.getElementById('updateExpiredUserAddress');
            const address = addressInput.value.trim();

            if (!address) {
                window.showMessage('请输入用户地址', 'warning');
                return;
            }

            try {
                await window.updateExpiredMiners(address);
                addressInput.value = '';
            } catch (error) {
                console.error('更新失败:', error);
            }
        };

        /**
         * 紧急暂停UI
         */
        window.adminEmergencyPauseUI = async function() {
            try {
                await window.emergencyPause();
            } catch (error) {
                console.error('暂停失败:', error);
            }
        };

        // 监听钱包连接事件，检查是否为管理员
        window.addEventListener('load', function() {
            // 延迟检查管理员状态
            setTimeout(function() {
                if (window.isConnected && window.userAccount) {
                    window.checkAndShowAdminPanel();
                }
            }, 2000);
        });

    </script>

    <!-- 自动加载管理员数据 -->
    <script src="js/auto-load-admin-data.js"></script>

</body>
</html>
